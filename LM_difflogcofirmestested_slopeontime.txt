[1] "Abruzzo"
[1] "Estimated slope and its 95% confidence interval (new): -0.011 (-0.026,0.005)"
[1] "Half-life in days and its 95% confidence interval (new): 63.718 (26.298,-150.656)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.008 (0.002,0.014)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 88.071 (49.983,370.111)"
[1] "======================================="
[1] "Basilicata"
[1] "Estimated slope and its 95% confidence interval (new): -0.064 (-0.085,-0.043)"
[1] "Half-life in days and its 95% confidence interval (new): 10.878 (8.194,16.174)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.014 (0.005,0.023)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 50.411 (30.341,148.903)"
[1] "======================================="
[1] "Calabria"
[1] "Estimated slope and its 95% confidence interval (new): -0.040 (-0.054,-0.025)"
[1] "Half-life in days and its 95% confidence interval (new): 17.491 (12.840,27.425)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.004 (-0.001,0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 158.152 (68.220,-496.917)"
[1] "======================================="
[1] "Campania"
[1] "Estimated slope and its 95% confidence interval (new): -0.025 (-0.041,-0.008)"
[1] "Half-life in days and its 95% confidence interval (new): 27.959 (16.749,84.542)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.005 (-0.003,0.012)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 148.182 (55.671,-223.920)"
[1] "======================================="
[1] "Emilia-Romagna"
[1] "Estimated slope and its 95% confidence interval (new): -0.019 (-0.029,-0.010)"
[1] "Half-life in days and its 95% confidence interval (new): 35.885 (24.072,70.471)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.006 (0.001,0.011)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 122.224 (66.006,824.319)"
[1] "======================================="
[1] "Friuli Venezia Giulia"
[1] "Estimated slope and its 95% confidence interval (new): -0.028 (-0.042,-0.013)"
[1] "Half-life in days and its 95% confidence interval (new): 25.141 (16.428,53.530)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.008 (0.002,0.015)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 85.161 (47.720,395.373)"
[1] "======================================="
[1] "Lazio"
[1] NA NA
[1] "======================================="
[1] "Liguria"
[1] "Estimated slope and its 95% confidence interval (new): -0.018 (-0.030,-0.007)"
[1] "Half-life in days and its 95% confidence interval (new): 37.721 (22.934,106.173)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.009 (0.003,0.015)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 76.748 (46.155,227.619)"
[1] "======================================="
[1] "Lombardia"
[1] "Estimated slope and its 95% confidence interval (new): -0.013 (-0.025,-0.002)"
[1] "Half-life in days and its 95% confidence interval (new): 51.785 (27.906,358.864)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.016 (0.011,0.022)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 43.139 (32.152,65.534)"
[1] "======================================="
[1] "Marche"
[1] "Estimated slope and its 95% confidence interval (new): -0.042 (-0.053,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 16.609 (12.980,23.057)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.001 (-0.007,0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 998.473 (83.109,-99.708)"
[1] "======================================="
[1] "Molise"
[1] NA NA
[1] "======================================="
[1] "P.A. Bolzano"
[1] "Estimated slope and its 95% confidence interval (new): -0.048 (-0.068,-0.027)"
[1] "Half-life in days and its 95% confidence interval (new): 14.522 (10.196,25.224)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.019 (-0.030,-0.009)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -35.769 (-80.890,-22.962)"
[1] "======================================="
[1] "P.A. Trento"
[1] "Estimated slope and its 95% confidence interval (new): -0.031 (-0.050,-0.011)"
[1] "Half-life in days and its 95% confidence interval (new): 22.588 (13.798,62.230)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.012 (0.002,0.021)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 59.634 (32.388,375.552)"
[1] "======================================="
[1] "Piemonte"
[1] "Estimated slope and its 95% confidence interval (new): -0.004 (-0.017,0.009)"
[1] "Half-life in days and its 95% confidence interval (new): 171.824 (39.864,-74.376)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.029 (0.019,0.039)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 23.532 (17.555,35.680)"
[1] "======================================="
[1] "Puglia"
[1] "Estimated slope and its 95% confidence interval (new): -0.015 (-0.026,-0.004)"
[1] "Half-life in days and its 95% confidence interval (new): 45.645 (26.507,164.197)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.025 (0.016,0.035)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 27.187 (19.849,43.132)"
[1] "======================================="
[1] "Sardegna"
[1] "Estimated slope and its 95% confidence interval (new): -0.036 (-0.051,-0.020)"
[1] "Half-life in days and its 95% confidence interval (new): 19.455 (13.638,33.926)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.007 (0.001,0.014)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 93.106 (48.585,1112.975)"
[1] "======================================="
[1] "Sicilia"
[1] "Estimated slope and its 95% confidence interval (new): -0.030 (-0.044,-0.016)"
[1] "Half-life in days and its 95% confidence interval (new): 23.274 (15.901,43.395)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.025,-0.003)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -49.720 (-271.398,-27.367)"
[1] "======================================="
[1] "Toscana"
[1] "Estimated slope and its 95% confidence interval (new): -0.017 (-0.029,-0.005)"
[1] "Half-life in days and its 95% confidence interval (new): 40.145 (23.638,133.088)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.027 (0.015,0.039)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 25.976 (17.916,47.219)"
[1] "======================================="
[1] "Umbria"
[1] "Estimated slope and its 95% confidence interval (new): -0.094 (-0.109,-0.078)"
[1] "Half-life in days and its 95% confidence interval (new): 7.400 (6.358,8.851)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.022,-0.011)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -42.276 (-64.089,-31.541)"
[1] "======================================="
[1] "Valle d'Aosta"
[1] NA NA
[1] "======================================="
[1] "Veneto"
[1] "Estimated slope and its 95% confidence interval (new): -0.005 (-0.019,0.009)"
[1] "Half-life in days and its 95% confidence interval (new): 127.312 (35.638,-80.967)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.023 (0.017,0.029)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 29.708 (23.728,39.718)"
[1] "======================================="
[1] "Italy"
[1] "Estimated slope and its 95% confidence interval (new): -0.012 (-0.021,-0.003)"
[1] "Half-life in days and its 95% confidence interval (new): 57.709 (32.784,240.715)"
[1] "Estimated slope and its 95% confidence interval (cumulative): 0.014 (0.008,0.021)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): 48.027 (33.579,84.298)"
[1] "======================================="
[1] "Abruzzo"

  Johns Hopkins Center for Systems Science and Engineering (2020),
  https://github.com/CSSEGISandData/COVID-19

  Wikipedia (2020), https://www.wikipedia.org

  Guidotti, E., Ardia, D., (2020), "COVID-19 Data Hub", Working paper, doi:
  10.13140/RG.2.2.11649.81763.

To see these entries in BibTeX format, use 'print(<citation>, bibtex=TRUE)',
'toBibtex(.)', or set 'options(citation.bibtex.max=999)'.

To hide the data sources use 'verbose = FALSE'.
  Istituto Nazionale di Statistica, Italia (2018),
  https://www.istat.it/en/population-and-households?data-and-indicators

  Ministero della Salute, Italia (2020), https://github.com/pcm-dpc/COVID-19

  Guidotti, E., Ardia, D., (2020), "COVID-19 Data Hub", Working paper, doi:
  10.13140/RG.2.2.11649.81763.

To see these entries in BibTeX format, use 'print(<citation>, bibtex=TRUE)',
'toBibtex(.)', or set 'options(citation.bibtex.max=999)'.

To hide the data sources use 'verbose = FALSE'.Messaggi di avvertimento:
1: Unknown or uninitialised column: `death_2020_ratio`.
2: Unknown or uninitialised column: `pop_deaths_2020`.
3: Unknown or uninitialised column: `excess_death`.
4: Unknown or uninitialised column: `excess_death_frac`.
5: Unknown or uninitialised column: `weekly_death_frac`.
6: Unknown or uninitialised column: `weekly_death_pop`.
7: Unknown or uninitialised column: `cumul_total_pop_deaths_2020`.
8: Unknown or uninitialised column: `cumul_death_frac`.
9: Unknown or uninitialised column: `death_2020_ratio`.
10: Unknown or uninitialised column: `pop_deaths_2020`.
11: Unknown or uninitialised column: `excess_death`.
12: Unknown or uninitialised column: `excess_death_frac`.
13: Unknown or uninitialised column: `weekly_death_frac`.
14: Unknown or uninitialised column: `weekly_death_pop`.
15: Unknown or uninitialised column: `cumul_total_pop_deaths_2020`.
16: Unknown or uninitialised column: `cumul_death_frac`.
17: Unknown or uninitialised column: `death_2020_ratio`.
18: Unknown or uninitialised column: `pop_deaths_2020`.
19: Unknown or uninitialised column: `excess_death`.
20: Unknown or uninitialised column: `excess_death_frac`.
21: Unknown or uninitialised column: `weekly_death_frac`.
22: Unknown or uninitialised column: `weekly_death_pop`.
23: Unknown or uninitialised column: `cumul_total_pop_deaths_2020`.
24: Unknown or uninitialised column: `cumul_death_frac`.
[1] "Date"
Messaggi di avvertimento:
1: Unknown or uninitialised column: `death_2020_ratio`.
2: Unknown or uninitialised column: `pop_deaths_2020`.
3: Unknown or uninitialised column: `excess_death`.
4: Unknown or uninitialised column: `excess_death_frac`.
5: Unknown or uninitialised column: `weekly_death_frac`.
6: Unknown or uninitialised column: `weekly_death_pop`.
7: Unknown or uninitialised column: `cumul_total_pop_deaths_2020`.
8: Unknown or uninitialised column: `cumul_death_frac`.
9: Unknown or uninitialised column: `death_2020_ratio`.
10: Unknown or uninitialised column: `pop_deaths_2020`.
11: Unknown or uninitialised column: `excess_death`.
12: Unknown or uninitialised column: `excess_death_frac`.
13: Unknown or uninitialised column: `weekly_death_frac`.
14: Unknown or uninitialised column: `weekly_death_pop`.
15: Unknown or uninitialised column: `cumul_total_pop_deaths_2020`.
16: Unknown or uninitialised column: `cumul_death_frac`.
17: Unknown or uninitialised column: `death_2020_ratio`.
18: Unknown or uninitialised column: `pop_deaths_2020`.
19: Unknown or uninitialised column: `excess_death`.
20: Unknown or uninitialised column: `excess_death_frac`.
21: Unknown or uninitialised column: `weekly_death_frac`.
22: Unknown or uninitialised column: `weekly_death_pop`.
23: Unknown or uninitialised column: `cumul_total_pop_deaths_2020`.
24: Unknown or uninitialised column: `cumul_death_frac`.
25: Unknown or uninitialised column: `death_2020_ratio`.
26: Unknown or uninitialised column: `pop_deaths_2020`.
27: Unknown or uninitialised column: `excess_death`.
28: Unknown or uninitialised column: `excess_death_frac`.
29: Unknown or uninitialised column: `weekly_death_frac`.
30: Unknown or uninitialised column: `weekly_death_pop`.
31: Unknown or uninitialised column: `cumul_total_pop_deaths_2020`.
32: Unknown or uninitialised column: `cumul_death_frac`.
Messaggi di avvertimento:
1: Unknown or uninitialised column: `death_2020_ratio`.
2: Unknown or uninitialised column: `pop_deaths_2020`.
3: Unknown or uninitialised column: `excess_death`.
4: Unknown or uninitialised column: `excess_death_frac`.
5: Unknown or uninitialised column: `weekly_death_frac`.
6: Unknown or uninitialised column: `weekly_death_pop`.
7: Unknown or uninitialised column: `cumul_total_pop_deaths_2020`.
8: Unknown or uninitialised column: `cumul_death_frac`.
9: Unknown or uninitialised column: `death_2020_ratio`.
10: Unknown or uninitialised column: `pop_deaths_2020`.
11: Unknown or uninitialised column: `excess_death`.
12: Unknown or uninitialised column: `excess_death_frac`.
13: Unknown or uninitialised column: `weekly_death_frac`.
14: Unknown or uninitialised column: `weekly_death_pop`.
15: Unknown or uninitialised column: `cumul_total_pop_deaths_2020`.
16: Unknown or uninitialised column: `cumul_death_frac`.
17: Unknown or uninitialised column: `death_2020_ratio`.
18: Unknown or uninitialised column: `pop_deaths_2020`.
19: Unknown or uninitialised column: `excess_death`.
20: Unknown or uninitialised column: `excess_death_frac`.
21: Unknown or uninitialised column: `weekly_death_frac`.
22: Unknown or uninitialised column: `weekly_death_pop`.
23: Unknown or uninitialised column: `cumul_total_pop_deaths_2020`.
24: Unknown or uninitialised column: `cumul_death_frac`.
25: Unknown or uninitialised column: `death_2020_ratio`.
26: Unknown or uninitialised column: `pop_deaths_2020`.
27: Unknown or uninitialised column: `excess_death`.
28: Unknown or uninitialised column: `excess_death_frac`.
29: Unknown or uninitialised column: `weekly_death_frac`.
30: Unknown or uninitialised column: `weekly_death_pop`.
31: Unknown or uninitialised column: `cumul_total_pop_deaths_2020`.
32: Unknown or uninitialised column: `cumul_death_frac`.

> ## Script using COVID19 (package available from https://github.com/emanuele-guidotti/COVID19) package
> ## Copyright (C) 2020 
> ## Authors Krzyszto .... [TRUNCATED] 

> require(ggplot2)

> require(tidyverse)

> require(hrbrthemes)

> require(lubridate)

> require(COVID19) 

> data_study_date_start<-"2020-02-24"

> data_study_date_end<-"2020-04-20"

> data_study_date_start<-"2020-02-24" ## date from which we start downloading the data via COVID

> data_study_date_end<-"2020-04-20" ## date until which we download the data via COVID

> it_object_RData_file_toload_prefix<-"it_object_2020422" ## set to NA if you want to rerun the analysis completely including the downloading of the d .... [TRUNCATED] 

> it_object_RData_file_tosave_prefix<-"it_object_2020422" ## prefix of files to save data prepared for plotting.

> pop_2020_end_date<-"2020-04-04" ## when do the deceased data in the file "comuni_settimana.csv" end

> if (!is.na(data_study_date_end)){
+     pop_date_till<-as.Date(data_study_date_end)
+ }else{
+     pop_date_till<-today()
+ }

> dir_prefix<-"it" ## this is the prefix of the directory that will be great where the output graphs will be saved in

> gg <- list() ## store plots

> b_visualize_Italy<-FALSE

> b_scale_2020deaths_tmp<-TRUE   ## do we want to do scaling with the 2020 weekly deaths

> b_plot_COVIDexcessfrac_tmp<-TRUE ## do we plot the excess death information

> b_plot_daily_tests<-FALSE ## at the moment this does not have an effect on the file naming, so as not to change the LaTeX

> b_do_lm_numtest<-TRUE

> ## List of various plot setups
> lsetups<-list(
+ ## Visualization of positive fraction of tests
+ list(index_setup=1,b_onlycumul=FALSE,b_regions=TR .... [TRUNCATED] 

> if (!is.na(it_object_RData_file_tosave_prefix)){
+     it_objects<-vector("list",length(lsetups))
+ }

> for (setup in lsetups){
+ ## Control variables what to plot
+     b_onlycumul<-setup$b_onlycumul ## do we only plot the cumulative tested curve
+    .... [TRUNCATED] 
[1] "Abruzzo"

> ## Script using COVID19 (package available from https://github.com/emanuele-guidotti/COVID19) package
> ## Copyright (C) 2020 
> ## Authors Krzyszto .... [TRUNCATED] 

> require(ggplot2)

> require(tidyverse)

> require(hrbrthemes)

> require(lubridate)

> require(COVID19) 

> data_study_date_start<-"2020-02-24"

> data_study_date_end<-"2020-04-20"

> data_study_date_start<-"2020-02-24" ## date from which we start downloading the data via COVID

> data_study_date_end<-"2020-04-20" ## date until which we download the data via COVID

> it_object_RData_file_toload_prefix<-"it_object_2020422" ## set to NA if you want to rerun the analysis completely including the downloading of the d .... [TRUNCATED] 

> it_object_RData_file_tosave_prefix<-"it_object_2020422" ## prefix of files to save data prepared for plotting.

> pop_2020_end_date<-"2020-04-04" ## when do the deceased data in the file "comuni_settimana.csv" end

> if (!is.na(data_study_date_end)){
+     pop_date_till<-as.Date(data_study_date_end)
+ }else{
+     pop_date_till<-today()
+ }

> dir_prefix<-"it" ## this is the prefix of the directory that will be great where the output graphs will be saved in

> gg <- list() ## store plots

> b_visualize_Italy<-FALSE

> b_scale_2020deaths_tmp<-TRUE   ## do we want to do scaling with the 2020 weekly deaths

> b_plot_COVIDexcessfrac_tmp<-TRUE ## do we plot the excess death information

> b_plot_daily_tests<-FALSE ## at the moment this does not have an effect on the file naming, so as not to change the LaTeX

> b_do_lm_numtest<-TRUE

> ## List of various plot setups
> lsetups<-list(
+ ## Visualization of positive fraction of tests
+ list(index_setup=1,b_onlycumul=FALSE,b_regions=TR .... [TRUNCATED] 

> if (!is.na(it_object_RData_file_tosave_prefix)){
+     it_objects<-vector("list",length(lsetups))
+ }

> for (setup in lsetups){
+ ## Control variables what to plot
+     b_onlycumul<-setup$b_onlycumul ## do we only plot the cumulative tested curve
+    .... [TRUNCATED] 
[1] "Abruzzo"
[1] "Abruzzo"
[1] "Abruzzo"
debugging in: (function(data, key, b_dodaily, b_donumtest, b_dolog,b_onlycumul,b_do_lm_numtest){
    res<-ggplot(data = data) 
    vMSE<-c()
    if (! b_donumtest){
\tres<-res+geom_line(aes(x = date, y = confirmed_scaled, color = '(IT) Confirmed/Tests')) 
\tvMSE<-c(vMSE,confirmed_scaled_all=sqrt(mean((data$confirmed_scaled-dp$confirmed_scaled[1:nrow(data)])^2,na.rm=TRUE)))
\tvMSE<-c(vMSE,confirmed_scaled_dp=sqrt(mean((data$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))]-dp$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))])^2,na.rm=TRUE)))
\t    if ((!b_onlycumul)&&!(b_scale_2020deaths)){
\t\tres<-res+geom_line(aes(x = date, y = deaths_scaled, color = "(IT) Deaths Scaled"))
\t\tvMSE<-c(vMSE,deaths_scaled=sqrt(mean((data$deaths_scaled-dp$confirmed_scaled[1:nrow(data)])^2,na.rm=TRUE)))
\t    \tvMSE<-c(vMSE,deaths_scaled_dp=sqrt(mean((data$deaths_scaled[1:min(nrow(data),length(dp$confirmed_scaled))]-dp$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))])^2,na.rm=TRUE)))
\t    }
\t    if (b_dodaily){
\t\tres<-res+geom_line(aes(x = date, y = confirmed_new_scaled, color = '(IT) Daily Confirmed/Tests'))
\t\tvMSE<-c(vMSE,confirmed_new_scaled=sqrt(mean((data$confirmed_new_scaled-dp$confirmed_scaled[1:nrow(data)])^2,na.rm=TRUE)))
\t    \tvMSE<-c(vMSE,confirmed_new_scaled_dp=sqrt(mean((data$confirmed_new_scaled[1:min(nrow(data),length(dp$confirmed_scaled))]-dp$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))])^2,na.rm=TRUE)))
\t    }
\txdp <- dp[1:nrow(data),]
\txdp$date <- data$date[1:nrow(data)]
\tres<-res+geom_line(data = xdp, size = 2, aes(x = date, y = confirmed_scaled, color = '(DP) Confirmed Scaled')) 
    }else{
    \t    res<-res+geom_line(aes(x = date, y = confirmed_new_gr, color = "(IT) Confirmed")) +
\t\tgeom_line(aes(x = date, y = tests_new_gr, color = '(IT) Tests')) 
\t    if (b_dolog){
\t\tres<-res+geom_line(aes(x = date, y = diff_confirmed_new, color = '(IT) Confirmed - Tests'))
\t\tres<-res+geom_line(aes(x = date, y = diff_confirmed_cumul, color = '(IT) Confirmed - Tests cumulative'))
\t\tif (b_do_lm_numtest){
\t\t    c_reg<-strsplit(data$id[1],", ")[[1]][2]
\t\t    if (is.na(c_reg)){c_reg<-"Italy"}
\t\t    dfdata_cutoff<-read.csv("NumTest_dates.csv",header=TRUE,sep=";")
\t\t    i_reg<-which(dfdata_cutoff$region==c_reg)
\t\t    sink("LM_difflogcofirmestested_slopeontime.txt",append=TRUE)
\t\t    print(c_reg)
\t\t    if (!is.na(dfdata_cutoff[i_reg,"date_cutoff"])){
\t\t\tdata_for_lm<-data
\t\t\tif (!is.na(dfdata_cutoff[i_reg,"remove_datefrom"])){
\t\t\t    data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date>=dfdata_cutoff[i_reg,"remove_datefrom"]),which(data_for_lm$date<=dfdata_cutoff[i_reg,"remove_dateto"]))]<-NA
\t\t\t    ##data_for_lm$diff_confirmed_cumul[intersect(which(data_for_lm$date>=dfdata_cutoff[i_reg,"remove_datefrom"]),which(data_for_lm$date<=dfdata_cutoff[i_reg,"remove_dateto"]))]<-NA
\t\t\t}
\t\t\tdata_for_lm<-data_for_lm[which(data_for_lm$date>=dfdata_cutoff[i_reg,"date_cutoff"]),]
\t\t\tif (!is.na(dfdata_cutoff[i_reg,"end_date"])){
\t\t\t    data_for_lm<-data_for_lm[which(data_for_lm$date<=dfdata_cutoff[i_reg,"end_date"]),]
\t\t\t}
\t\t\tdata_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new),is.nan(data_for_lm$diff_confirmed_new)))]<-NA
\t\t\tdata_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul),is.nan(data_for_lm$diff_confirmed_cumul)))]<-NA
\t\t\tdata_for_lm$t <- 1:nrow(data_for_lm)
\t\t\tmod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm,na.action="na.exclude")
\t\t\tci_new <- predict(mod_new, newdata = data_for_lm, interval = 'prediction')
\t\t\tmod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm,na.action="na.exclude")
\t\t\tci_cumul <- predict(mod_new, newdata = data_for_lm, interval = 'prediction')
\t\t\tdata$ci_lwr_new<-NA
\t\t\tdata$ci_upr_new<-NA\t\t\t
\t\t\tdata$pred_diff_new<-NA\t\t\t
\t\t\tdata$ci_lwr_cumul<-NA
\t\t\tdata$ci_upr_cumul<-NA\t\t\t
\t\t\tdata$pred_diff_cumul<-NA\t\t\t
\t\t\tv_dates_for_lm_indices<-which(data$date>=dfdata_cutoff[i_reg,"date_cutoff"])
\t\t\tif (!is.na(dfdata_cutoff[i_reg,"end_date"])){
\t\t\t    v_dates_for_lm_indices<-intersect(v_dates_for_lm_indices,which(data_for_lm$date<=dfdata_cutoff[i_reg,"end_date"]))
\t\t\t}
\t\t\tdata$pred_diff_new[v_dates_for_lm_indices]<-ci_new[,1]
\t\t\tdata$ci_lwr_new[v_dates_for_lm_indices]<-ci_new[,2]
\t\t\tdata$ci_upr_new[v_dates_for_lm_indices]<-ci_new[,3]
\t\t\tdata$pred_diff_cumul[v_dates_for_lm_indices]<-ci_cumul[,1]
\t\t\tdata$ci_lwr_cumul[v_dates_for_lm_indices]<-ci_cumul[,2]
\t\t\tdata$ci_upr_cumul[v_dates_for_lm_indices]<-ci_cumul[,3]

\t\t\t#res<-res+  geom_line(aes(y = ci[,1],)) +   geom_ribbon(aes(ymin = ci[,2], ymax = ci[,3]), alpha = 0.4) 
\t\t\t#res<-res+   geom_ribbon(aes(x=date,ymin = data$ci_lwr, ymax = data$ci_upr), alpha = 0.4) 
\t\t\tif (is.na(dfdata_cutoff[i_reg,"end_date"])){
\t\t\t    #res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])), aes(x=date,ymin = ci_lwr_new, ymax = ci_upr_new), alpha = 0.4) 
\t\t\t    res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])), aes(x=date,ymin = ci_lwr_cumul, ymax = ci_upr_cumul), alpha = 0.4) 
\t\t\t    
\t\t\t    #res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])),aes(x=date,y = pred_diff_new))
\t\t\t    res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])),aes(x=date,y = pred_diff_cumul))
\t\t\t}else{
\t\t\t    res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])), aes(x=date,ymin = ci_lwr_new, ymax = ci_upr_new), alpha = 0.4) 
\t\t\t    res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])), aes(x=date,ymin = ci_lwr_cumul, ymax = ci_upr_cumul), alpha = 0.4) 
\t\t\t    
\t\t\t    res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])),aes(x=date,y = pred_diff_new))
\t\t\t    res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])),aes(x=date,y = pred_diff_cumul))
\t\t\t}
\t\t\tsumm_lm_new<-summary(mod_new)
\t\t\tsumm_lm_cumul<-summary(mod_cumul)
\t\t\tci_slope_new<-c(summ_lm_new$coefficients[2,1]-qnorm(0.975)*summ_lm_new$coefficients[2,2],summ_lm_new$coefficients[2,1]+qnorm(0.975)*summ_lm_new$coefficients[2,2])
\t\t\tprint(paste0("Estimated slope and its 95% confidence interval (new): ",format(round(summ_lm_new$coefficients[2,1], 3), nsmall = 3)," (",format(round(ci_slope_new[1], 3), nsmall = 3),",",format(round(ci_slope_new[2], 3), nsmall = 3),")"))
\t\t\tprint(paste0("Half-life in days and its 95% confidence interval (new): ",format(round((-1)*log(2)/summ_lm_new$coefficients[2,1], 3), nsmall = 3)," (",format(round((-1)*log(2)/ci_slope_new[1], 3), nsmall = 3),",",format((-1)*round(log(2)/ci_slope_new[2], 3), nsmall = 3),")"))

\t\t\tci_slope_cumul<-c(summ_lm_cumul$coefficients[2,1]-qnorm(0.975)*summ_lm_cumul$coefficients[2,2],summ_lm_cumul$coefficients[2,1]+qnorm(0.975)*summ_lm_cumul$coefficients[2,2])
\t\t\tprint(paste0("Estimated slope and its 95% confidence interval (cumulative): ",format(round(summ_lm_cumul$coefficients[2,1], 3), nsmall = 3)," (",format(round(ci_slope_cumul[1], 3), nsmall = 3),",",format(round(ci_slope_cumul[2], 3), nsmall = 3),")"))
\t\t\tprint(paste0("Doubling time in days and its 95% confidence interval (cumulative): ",format(round(log(2)/summ_lm_cumul$coefficients[2,1], 3), nsmall = 3)," (",format(round(log(2)/ci_slope_cumul[2], 3), nsmall = 3),",",format(round(log(2)/ci_slope_cumul[1], 3), nsmall = 3),")"))
\t\t    }else{
\t\t\tprint(c(NA,NA))
\t\t    }
\t\t    print("=======================================")
\t\t    sink()
\t\t}
\t    }
    }    
    if (b_scale_2020deaths){
        if (b_plot_COVIDexcessfrac){
            res<-res+geom_line(aes(x = date, y = excess_death_frac, color = "(IT) COVID frac excess deaths")) \t
    \t}
        res<-res+geom_line(aes(x = date, y = weekly_death_frac, color = "(IT) COVID frac weekly deaths")) \t
        res<-res+geom_line(aes(x = date, y = weekly_death_frac_pastavg, color = "(IT) COVID frac weekly deaths wrt past")) \t
        res<-res+geom_line(aes(x = date, y = cumul_death_frac, color = "(IT) COVID frac cumul deaths")) \t
        res<-res+geom_line(aes(x = date, y = cumul_death_frac_pastavg, color = "(IT) COVID frac cumul deaths wrt past")) \t
        res<-res+geom_line(aes(x = date, y = death_2020_ratio, color = "(IT) deaths in 2020 wrt past")) \t
    }
    title <- ifelse(is.na(key$administrative_area_level_2), key$administrative_area_level_1, key$administrative_area_level_2)
    if(b_dolog) title <- paste(title,"(log)")
    res <- res + ggtitle(title) + ylab("") + xlab("") + theme(legend.title = element_blank())
    res
    list(grplot=res,MSE=vMSE, title = title)
})(dots[[1L]][[1L]], dots[[2L]][[1L]], FALSE, TRUE, TRUE, FALSE, 
    TRUE)
debug at #1: {
    res <- ggplot(data = data)
    vMSE <- c()
    if (!b_donumtest) {
        res <- res + geom_line(aes(x = date, y = confirmed_scaled, 
            color = "(IT) Confirmed/Tests"))
        vMSE <- c(vMSE, confirmed_scaled_all = sqrt(mean((data$confirmed_scaled - 
            dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
        vMSE <- c(vMSE, confirmed_scaled_dp = sqrt(mean((data$confirmed_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
        if ((!b_onlycumul) && !(b_scale_2020deaths)) {
            res <- res + geom_line(aes(x = date, y = deaths_scaled, 
                color = "(IT) Deaths Scaled"))
            vMSE <- c(vMSE, deaths_scaled = sqrt(mean((data$deaths_scaled - 
                dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
            vMSE <- c(vMSE, deaths_scaled_dp = sqrt(mean((data$deaths_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
        }
        if (b_dodaily) {
            res <- res + geom_line(aes(x = date, y = confirmed_new_scaled, 
                color = "(IT) Daily Confirmed/Tests"))
            vMSE <- c(vMSE, confirmed_new_scaled = sqrt(mean((data$confirmed_new_scaled - 
                dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
            vMSE <- c(vMSE, confirmed_new_scaled_dp = sqrt(mean((data$confirmed_new_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
        }
        xdp <- dp[1:nrow(data), ]
        xdp$date <- data$date[1:nrow(data)]
        res <- res + geom_line(data = xdp, size = 2, aes(x = date, 
            y = confirmed_scaled, color = "(DP) Confirmed Scaled"))
    }
    else {
        res <- res + geom_line(aes(x = date, y = confirmed_new_gr, 
            color = "(IT) Confirmed")) + geom_line(aes(x = date, 
            y = tests_new_gr, color = "(IT) Tests"))
        if (b_dolog) {
            res <- res + geom_line(aes(x = date, y = diff_confirmed_new, 
                color = "(IT) Confirmed - Tests"))
            res <- res + geom_line(aes(x = date, y = diff_confirmed_cumul, 
                color = "(IT) Confirmed - Tests cumulative"))
            if (b_do_lm_numtest) {
                c_reg <- strsplit(data$id[1], ", ")[[1]][2]
                if (is.na(c_reg)) {
                  c_reg <- "Italy"
                }
                dfdata_cutoff <- read.csv("NumTest_dates.csv", 
                  header = TRUE, sep = ";")
                i_reg <- which(dfdata_cutoff$region == c_reg)
                sink("LM_difflogcofirmestested_slopeontime.txt", 
                  append = TRUE)
                print(c_reg)
                if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
                  data_for_lm <- data
                  if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
                    data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
                      dfdata_cutoff[i_reg, "remove_datefrom"]), 
                      which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                        "remove_dateto"]))] <- NA
                  }
                  data_for_lm <- data_for_lm[which(data_for_lm$date >= 
                    dfdata_cutoff[i_reg, "date_cutoff"]), ]
                  if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                    data_for_lm <- data_for_lm[which(data_for_lm$date <= 
                      dfdata_cutoff[i_reg, "end_date"]), ]
                  }
                  data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
                    is.nan(data_for_lm$diff_confirmed_new)))] <- NA
                  data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
                    is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
                  data_for_lm$t <- 1:nrow(data_for_lm)
                  mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
                    na.action = "na.exclude")
                  ci_new <- predict(mod_new, newdata = data_for_lm, 
                    interval = "prediction")
                  mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
                    na.action = "na.exclude")
                  ci_cumul <- predict(mod_new, newdata = data_for_lm, 
                    interval = "prediction")
                  data$ci_lwr_new <- NA
                  data$ci_upr_new <- NA
                  data$pred_diff_new <- NA
                  data$ci_lwr_cumul <- NA
                  data$ci_upr_cumul <- NA
                  data$pred_diff_cumul <- NA
                  v_dates_for_lm_indices <- which(data$date >= 
                    dfdata_cutoff[i_reg, "date_cutoff"])
                  if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                    v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
                      which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                        "end_date"]))
                  }
                  data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 
                    1]
                  data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 
                    2]
                  data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 
                    3]
                  data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                    1]
                  data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                    2]
                  data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                    3]
                  if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
                    res <- res + geom_ribbon(data = data %>% 
                      filter(date >= as.Date(dfdata_cutoff[i_reg, 
                        "date_cutoff"])), aes(x = date, ymin = ci_lwr_cumul, 
                      ymax = ci_upr_cumul), alpha = 0.4)
                    res <- res + geom_line(data = data %>% filter(date >= 
                      as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                      aes(x = date, y = pred_diff_cumul))
                  }
                  else {
                    res <- res + geom_ribbon(data = data %>% 
                      filter(date >= as.Date(dfdata_cutoff[i_reg, 
                        "date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, ymin = ci_lwr_new, 
                      ymax = ci_upr_new), alpha = 0.4)
                    res <- res + geom_ribbon(data = data %>% 
                      filter(date >= as.Date(dfdata_cutoff[i_reg, 
                        "date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, ymin = ci_lwr_cumul, 
                      ymax = ci_upr_cumul), alpha = 0.4)
                    res <- res + geom_line(data = data %>% filter(date >= 
                      as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                      filter(date <= as.Date(dfdata_cutoff[i_reg, 
                        "end_date"])), aes(x = date, y = pred_diff_new))
                    res <- res + geom_line(data = data %>% filter(date >= 
                      as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                      filter(date <= as.Date(dfdata_cutoff[i_reg, 
                        "end_date"])), aes(x = date, y = pred_diff_cumul))
                  }
                  summ_lm_new <- summary(mod_new)
                  summ_lm_cumul <- summary(mod_cumul)
                  ci_slope_new <- c(summ_lm_new$coefficients[2, 
                    1] - qnorm(0.975) * summ_lm_new$coefficients[2, 
                    2], summ_lm_new$coefficients[2, 1] + qnorm(0.975) * 
                    summ_lm_new$coefficients[2, 2])
                  print(paste0("Estimated slope and its 95% confidence interval (new): ", 
                    format(round(summ_lm_new$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round(ci_slope_new[1], 
                      3), nsmall = 3), ",", format(round(ci_slope_new[2], 
                      3), nsmall = 3), ")"))
                  print(paste0("Half-life in days and its 95% confidence interval (new): ", 
                    format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round((-1) * 
                      log(2)/ci_slope_new[1], 3), nsmall = 3), 
                    ",", format((-1) * round(log(2)/ci_slope_new[2], 
                      3), nsmall = 3), ")"))
                  ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 
                    1] - qnorm(0.975) * summ_lm_cumul$coefficients[2, 
                    2], summ_lm_cumul$coefficients[2, 1] + qnorm(0.975) * 
                    summ_lm_cumul$coefficients[2, 2])
                  print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
                    format(round(summ_lm_cumul$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round(ci_slope_cumul[1], 
                      3), nsmall = 3), ",", format(round(ci_slope_cumul[2], 
                      3), nsmall = 3), ")"))
                  print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
                    format(round(log(2)/summ_lm_cumul$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
                      3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
                      3), nsmall = 3), ")"))
                }
                else {
                  print(c(NA, NA))
                }
                print("=======================================")
                sink()
            }
        }
    }
    if (b_scale_2020deaths) {
        if (b_plot_COVIDexcessfrac) {
            res <- res + geom_line(aes(x = date, y = excess_death_frac, 
                color = "(IT) COVID frac excess deaths"))
        }
        res <- res + geom_line(aes(x = date, y = weekly_death_frac, 
            color = "(IT) COVID frac weekly deaths"))
        res <- res + geom_line(aes(x = date, y = weekly_death_frac_pastavg, 
            color = "(IT) COVID frac weekly deaths wrt past"))
        res <- res + geom_line(aes(x = date, y = cumul_death_frac, 
            color = "(IT) COVID frac cumul deaths"))
        res <- res + geom_line(aes(x = date, y = cumul_death_frac_pastavg, 
            color = "(IT) COVID frac cumul deaths wrt past"))
        res <- res + geom_line(aes(x = date, y = death_2020_ratio, 
            color = "(IT) deaths in 2020 wrt past"))
    }
    title <- ifelse(is.na(key$administrative_area_level_2), key$administrative_area_level_1, 
        key$administrative_area_level_2)
    if (b_dolog) 
        title <- paste(title, "(log)")
    res <- res + ggtitle(title) + ylab("") + xlab("") + theme(legend.title = element_blank())
    res
    list(grplot = res, MSE = vMSE, title = title)
}
debug at #2: res <- ggplot(data = data)
debug at #3: vMSE <- c()
debug at #4: if (!b_donumtest) {
    res <- res + geom_line(aes(x = date, y = confirmed_scaled, 
        color = "(IT) Confirmed/Tests"))
    vMSE <- c(vMSE, confirmed_scaled_all = sqrt(mean((data$confirmed_scaled - 
        dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
    vMSE <- c(vMSE, confirmed_scaled_dp = sqrt(mean((data$confirmed_scaled[1:min(nrow(data), 
        length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
        length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
    if ((!b_onlycumul) && !(b_scale_2020deaths)) {
        res <- res + geom_line(aes(x = date, y = deaths_scaled, 
            color = "(IT) Deaths Scaled"))
        vMSE <- c(vMSE, deaths_scaled = sqrt(mean((data$deaths_scaled - 
            dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
        vMSE <- c(vMSE, deaths_scaled_dp = sqrt(mean((data$deaths_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
    }
    if (b_dodaily) {
        res <- res + geom_line(aes(x = date, y = confirmed_new_scaled, 
            color = "(IT) Daily Confirmed/Tests"))
        vMSE <- c(vMSE, confirmed_new_scaled = sqrt(mean((data$confirmed_new_scaled - 
            dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
        vMSE <- c(vMSE, confirmed_new_scaled_dp = sqrt(mean((data$confirmed_new_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
    }
    xdp <- dp[1:nrow(data), ]
    xdp$date <- data$date[1:nrow(data)]
    res <- res + geom_line(data = xdp, size = 2, aes(x = date, 
        y = confirmed_scaled, color = "(DP) Confirmed Scaled"))
} else {
    res <- res + geom_line(aes(x = date, y = confirmed_new_gr, 
        color = "(IT) Confirmed")) + geom_line(aes(x = date, 
        y = tests_new_gr, color = "(IT) Tests"))
    if (b_dolog) {
        res <- res + geom_line(aes(x = date, y = diff_confirmed_new, 
            color = "(IT) Confirmed - Tests"))
        res <- res + geom_line(aes(x = date, y = diff_confirmed_cumul, 
            color = "(IT) Confirmed - Tests cumulative"))
        if (b_do_lm_numtest) {
            c_reg <- strsplit(data$id[1], ", ")[[1]][2]
            if (is.na(c_reg)) {
                c_reg <- "Italy"
            }
            dfdata_cutoff <- read.csv("NumTest_dates.csv", header = TRUE, 
                sep = ";")
            i_reg <- which(dfdata_cutoff$region == c_reg)
            sink("LM_difflogcofirmestested_slopeontime.txt", 
                append = TRUE)
            print(c_reg)
            if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
                data_for_lm <- data
                if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
                  data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
                    dfdata_cutoff[i_reg, "remove_datefrom"]), 
                    which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                      "remove_dateto"]))] <- NA
                }
                data_for_lm <- data_for_lm[which(data_for_lm$date >= 
                  dfdata_cutoff[i_reg, "date_cutoff"]), ]
                if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                  data_for_lm <- data_for_lm[which(data_for_lm$date <= 
                    dfdata_cutoff[i_reg, "end_date"]), ]
                }
                data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
                  is.nan(data_for_lm$diff_confirmed_new)))] <- NA
                data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
                  is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
                data_for_lm$t <- 1:nrow(data_for_lm)
                mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
                  na.action = "na.exclude")
                ci_new <- predict(mod_new, newdata = data_for_lm, 
                  interval = "prediction")
                mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
                  na.action = "na.exclude")
                ci_cumul <- predict(mod_new, newdata = data_for_lm, 
                  interval = "prediction")
                data$ci_lwr_new <- NA
                data$ci_upr_new <- NA
                data$pred_diff_new <- NA
                data$ci_lwr_cumul <- NA
                data$ci_upr_cumul <- NA
                data$pred_diff_cumul <- NA
                v_dates_for_lm_indices <- which(data$date >= 
                  dfdata_cutoff[i_reg, "date_cutoff"])
                if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                  v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
                    which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                      "end_date"]))
                }
                data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 
                  1]
                data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 
                  2]
                data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 
                  3]
                data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                  1]
                data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                  2]
                data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                  3]
                if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
                  res <- res + geom_ribbon(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                    aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
                    alpha = 0.4)
                  res <- res + geom_line(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                    aes(x = date, y = pred_diff_cumul))
                }
                else {
                  res <- res + geom_ribbon(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                    filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, ymin = ci_lwr_new, 
                    ymax = ci_upr_new), alpha = 0.4)
                  res <- res + geom_ribbon(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                    filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, ymin = ci_lwr_cumul, 
                    ymax = ci_upr_cumul), alpha = 0.4)
                  res <- res + geom_line(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                    filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, y = pred_diff_new))
                  res <- res + geom_line(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                    filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, y = pred_diff_cumul))
                }
                summ_lm_new <- summary(mod_new)
                summ_lm_cumul <- summary(mod_cumul)
                ci_slope_new <- c(summ_lm_new$coefficients[2, 
                  1] - qnorm(0.975) * summ_lm_new$coefficients[2, 
                  2], summ_lm_new$coefficients[2, 1] + qnorm(0.975) * 
                  summ_lm_new$coefficients[2, 2])
                print(paste0("Estimated slope and its 95% confidence interval (new): ", 
                  format(round(summ_lm_new$coefficients[2, 1], 
                    3), nsmall = 3), " (", format(round(ci_slope_new[1], 
                    3), nsmall = 3), ",", format(round(ci_slope_new[2], 
                    3), nsmall = 3), ")"))
                print(paste0("Half-life in days and its 95% confidence interval (new): ", 
                  format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
                    1], 3), nsmall = 3), " (", format(round((-1) * 
                    log(2)/ci_slope_new[1], 3), nsmall = 3), 
                  ",", format((-1) * round(log(2)/ci_slope_new[2], 
                    3), nsmall = 3), ")"))
                ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 
                  1] - qnorm(0.975) * summ_lm_cumul$coefficients[2, 
                  2], summ_lm_cumul$coefficients[2, 1] + qnorm(0.975) * 
                  summ_lm_cumul$coefficients[2, 2])
                print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
                  format(round(summ_lm_cumul$coefficients[2, 
                    1], 3), nsmall = 3), " (", format(round(ci_slope_cumul[1], 
                    3), nsmall = 3), ",", format(round(ci_slope_cumul[2], 
                    3), nsmall = 3), ")"))
                print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
                  format(round(log(2)/summ_lm_cumul$coefficients[2, 
                    1], 3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
                    3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
                    3), nsmall = 3), ")"))
            }
            else {
                print(c(NA, NA))
            }
            print("=======================================")
            sink()
        }
    }
}
debug at #22: res <- res + geom_line(aes(x = date, y = confirmed_new_gr, color = "(IT) Confirmed")) + 
    geom_line(aes(x = date, y = tests_new_gr, color = "(IT) Tests"))
debug at #24: if (b_dolog) {
    res <- res + geom_line(aes(x = date, y = diff_confirmed_new, 
        color = "(IT) Confirmed - Tests"))
    res <- res + geom_line(aes(x = date, y = diff_confirmed_cumul, 
        color = "(IT) Confirmed - Tests cumulative"))
    if (b_do_lm_numtest) {
        c_reg <- strsplit(data$id[1], ", ")[[1]][2]
        if (is.na(c_reg)) {
            c_reg <- "Italy"
        }
        dfdata_cutoff <- read.csv("NumTest_dates.csv", header = TRUE, 
            sep = ";")
        i_reg <- which(dfdata_cutoff$region == c_reg)
        sink("LM_difflogcofirmestested_slopeontime.txt", append = TRUE)
        print(c_reg)
        if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
            data_for_lm <- data
            if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
                data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
                  dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
                  dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
            }
            data_for_lm <- data_for_lm[which(data_for_lm$date >= 
                dfdata_cutoff[i_reg, "date_cutoff"]), ]
            if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                data_for_lm <- data_for_lm[which(data_for_lm$date <= 
                  dfdata_cutoff[i_reg, "end_date"]), ]
            }
            data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
                is.nan(data_for_lm$diff_confirmed_new)))] <- NA
            data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
                is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
            data_for_lm$t <- 1:nrow(data_for_lm)
            mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
                na.action = "na.exclude")
            ci_new <- predict(mod_new, newdata = data_for_lm, 
                interval = "prediction")
            mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
                na.action = "na.exclude")
            ci_cumul <- predict(mod_new, newdata = data_for_lm, 
                interval = "prediction")
            data$ci_lwr_new <- NA
            data$ci_upr_new <- NA
            data$pred_diff_new <- NA
            data$ci_lwr_cumul <- NA
            data$ci_upr_cumul <- NA
            data$pred_diff_cumul <- NA
            v_dates_for_lm_indices <- which(data$date >= dfdata_cutoff[i_reg, 
                "date_cutoff"])
            if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
                  which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                    "end_date"]))
            }
            data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 
                1]
            data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 
                2]
            data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 
                3]
            data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                1]
            data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                2]
            data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                3]
            if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
                res <- res + geom_ribbon(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                  aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
                  alpha = 0.4)
                res <- res + geom_line(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                  aes(x = date, y = pred_diff_cumul))
            }
            else {
                res <- res + geom_ribbon(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                  filter(date <= as.Date(dfdata_cutoff[i_reg, 
                    "end_date"])), aes(x = date, ymin = ci_lwr_new, 
                  ymax = ci_upr_new), alpha = 0.4)
                res <- res + geom_ribbon(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                  filter(date <= as.Date(dfdata_cutoff[i_reg, 
                    "end_date"])), aes(x = date, ymin = ci_lwr_cumul, 
                  ymax = ci_upr_cumul), alpha = 0.4)
                res <- res + geom_line(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                  filter(date <= as.Date(dfdata_cutoff[i_reg, 
                    "end_date"])), aes(x = date, y = pred_diff_new))
                res <- res + geom_line(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                  filter(date <= as.Date(dfdata_cutoff[i_reg, 
                    "end_date"])), aes(x = date, y = pred_diff_cumul))
            }
            summ_lm_new <- summary(mod_new)
            summ_lm_cumul <- summary(mod_cumul)
            ci_slope_new <- c(summ_lm_new$coefficients[2, 1] - 
                qnorm(0.975) * summ_lm_new$coefficients[2, 2], 
                summ_lm_new$coefficients[2, 1] + qnorm(0.975) * 
                  summ_lm_new$coefficients[2, 2])
            print(paste0("Estimated slope and its 95% confidence interval (new): ", 
                format(round(summ_lm_new$coefficients[2, 1], 
                  3), nsmall = 3), " (", format(round(ci_slope_new[1], 
                  3), nsmall = 3), ",", format(round(ci_slope_new[2], 
                  3), nsmall = 3), ")"))
            print(paste0("Half-life in days and its 95% confidence interval (new): ", 
                format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
                  1], 3), nsmall = 3), " (", format(round((-1) * 
                  log(2)/ci_slope_new[1], 3), nsmall = 3), ",", 
                format((-1) * round(log(2)/ci_slope_new[2], 3), 
                  nsmall = 3), ")"))
            ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 
                1] - qnorm(0.975) * summ_lm_cumul$coefficients[2, 
                2], summ_lm_cumul$coefficients[2, 1] + qnorm(0.975) * 
                summ_lm_cumul$coefficients[2, 2])
            print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
                format(round(summ_lm_cumul$coefficients[2, 1], 
                  3), nsmall = 3), " (", format(round(ci_slope_cumul[1], 
                  3), nsmall = 3), ",", format(round(ci_slope_cumul[2], 
                  3), nsmall = 3), ")"))
            print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
                format(round(log(2)/summ_lm_cumul$coefficients[2, 
                  1], 3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
                  3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
                  3), nsmall = 3), ")"))
        }
        else {
            print(c(NA, NA))
        }
        print("=======================================")
        sink()
    }
}
debug at #25: res <- res + geom_line(aes(x = date, y = diff_confirmed_new, 
    color = "(IT) Confirmed - Tests"))
debug at #26: res <- res + geom_line(aes(x = date, y = diff_confirmed_cumul, 
    color = "(IT) Confirmed - Tests cumulative"))
debug at #27: if (b_do_lm_numtest) {
    c_reg <- strsplit(data$id[1], ", ")[[1]][2]
    if (is.na(c_reg)) {
        c_reg <- "Italy"
    }
    dfdata_cutoff <- read.csv("NumTest_dates.csv", header = TRUE, 
        sep = ";")
    i_reg <- which(dfdata_cutoff$region == c_reg)
    sink("LM_difflogcofirmestested_slopeontime.txt", append = TRUE)
    print(c_reg)
    if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
        data_for_lm <- data
        if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
            data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
                dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
                dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
        }
        data_for_lm <- data_for_lm[which(data_for_lm$date >= 
            dfdata_cutoff[i_reg, "date_cutoff"]), ]
        if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
            data_for_lm <- data_for_lm[which(data_for_lm$date <= 
                dfdata_cutoff[i_reg, "end_date"]), ]
        }
        data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
            is.nan(data_for_lm$diff_confirmed_new)))] <- NA
        data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
            is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
        data_for_lm$t <- 1:nrow(data_for_lm)
        mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
            na.action = "na.exclude")
        ci_new <- predict(mod_new, newdata = data_for_lm, interval = "prediction")
        mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
            na.action = "na.exclude")
        ci_cumul <- predict(mod_new, newdata = data_for_lm, interval = "prediction")
        data$ci_lwr_new <- NA
        data$ci_upr_new <- NA
        data$pred_diff_new <- NA
        data$ci_lwr_cumul <- NA
        data$ci_upr_cumul <- NA
        data$pred_diff_cumul <- NA
        v_dates_for_lm_indices <- which(data$date >= dfdata_cutoff[i_reg, 
            "date_cutoff"])
        if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
            v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
                which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                  "end_date"]))
        }
        data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 
            1]
        data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 2]
        data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 3]
        data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
            1]
        data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
            2]
        data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
            3]
        if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
            res <- res + geom_ribbon(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
                alpha = 0.4)
            res <- res + geom_line(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                aes(x = date, y = pred_diff_cumul))
        }
        else {
            res <- res + geom_ribbon(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
                aes(x = date, ymin = ci_lwr_new, ymax = ci_upr_new), 
                alpha = 0.4)
            res <- res + geom_ribbon(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
                aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
                alpha = 0.4)
            res <- res + geom_line(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
                aes(x = date, y = pred_diff_new))
            res <- res + geom_line(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
                aes(x = date, y = pred_diff_cumul))
        }
        summ_lm_new <- summary(mod_new)
        summ_lm_cumul <- summary(mod_cumul)
        ci_slope_new <- c(summ_lm_new$coefficients[2, 1] - qnorm(0.975) * 
            summ_lm_new$coefficients[2, 2], summ_lm_new$coefficients[2, 
            1] + qnorm(0.975) * summ_lm_new$coefficients[2, 2])
        print(paste0("Estimated slope and its 95% confidence interval (new): ", 
            format(round(summ_lm_new$coefficients[2, 1], 3), 
                nsmall = 3), " (", format(round(ci_slope_new[1], 
                3), nsmall = 3), ",", format(round(ci_slope_new[2], 
                3), nsmall = 3), ")"))
        print(paste0("Half-life in days and its 95% confidence interval (new): ", 
            format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
                1], 3), nsmall = 3), " (", format(round((-1) * 
                log(2)/ci_slope_new[1], 3), nsmall = 3), ",", 
            format((-1) * round(log(2)/ci_slope_new[2], 3), nsmall = 3), 
            ")"))
        ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 1] - 
            qnorm(0.975) * summ_lm_cumul$coefficients[2, 2], 
            summ_lm_cumul$coefficients[2, 1] + qnorm(0.975) * 
                summ_lm_cumul$coefficients[2, 2])
        print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
            format(round(summ_lm_cumul$coefficients[2, 1], 3), 
                nsmall = 3), " (", format(round(ci_slope_cumul[1], 
                3), nsmall = 3), ",", format(round(ci_slope_cumul[2], 
                3), nsmall = 3), ")"))
        print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
            format(round(log(2)/summ_lm_cumul$coefficients[2, 
                1], 3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
                3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
                3), nsmall = 3), ")"))
    }
    else {
        print(c(NA, NA))
    }
    print("=======================================")
    sink()
}
debug at #28: c_reg <- strsplit(data$id[1], ", ")[[1]][2]
debug at #29: if (is.na(c_reg)) {
    c_reg <- "Italy"
}
debug at #30: dfdata_cutoff <- read.csv("NumTest_dates.csv", header = TRUE, 
    sep = ";")
debug at #31: i_reg <- which(dfdata_cutoff$region == c_reg)
debug at #32: sink("LM_difflogcofirmestested_slopeontime.txt", append = TRUE)
debug at #33: print(c_reg)
[1] "Abruzzo"
debug at #34: if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
    data_for_lm <- data
    if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
        data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
            dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
            dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
    }
    data_for_lm <- data_for_lm[which(data_for_lm$date >= dfdata_cutoff[i_reg, 
        "date_cutoff"]), ]
    if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
        data_for_lm <- data_for_lm[which(data_for_lm$date <= 
            dfdata_cutoff[i_reg, "end_date"]), ]
    }
    data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
        is.nan(data_for_lm$diff_confirmed_new)))] <- NA
    data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
        is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
    data_for_lm$t <- 1:nrow(data_for_lm)
    mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
        na.action = "na.exclude")
    ci_new <- predict(mod_new, newdata = data_for_lm, interval = "prediction")
    mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
        na.action = "na.exclude")
    ci_cumul <- predict(mod_new, newdata = data_for_lm, interval = "prediction")
    data$ci_lwr_new <- NA
    data$ci_upr_new <- NA
    data$pred_diff_new <- NA
    data$ci_lwr_cumul <- NA
    data$ci_upr_cumul <- NA
    data$pred_diff_cumul <- NA
    v_dates_for_lm_indices <- which(data$date >= dfdata_cutoff[i_reg, 
        "date_cutoff"])
    if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
        v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
            which(data_for_lm$date <= dfdata_cutoff[i_reg, "end_date"]))
    }
    data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 1]
    data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 2]
    data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 3]
    data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
        1]
    data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 2]
    data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 3]
    if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
        res <- res + geom_ribbon(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), aes(x = date, 
            ymin = ci_lwr_cumul, ymax = ci_upr_cumul), alpha = 0.4)
        res <- res + geom_line(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), aes(x = date, 
            y = pred_diff_cumul))
    }
    else {
        res <- res + geom_ribbon(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, ymin = ci_lwr_new, ymax = ci_upr_new), 
            alpha = 0.4)
        res <- res + geom_ribbon(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
            alpha = 0.4)
        res <- res + geom_line(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, y = pred_diff_new))
        res <- res + geom_line(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, y = pred_diff_cumul))
    }
    summ_lm_new <- summary(mod_new)
    summ_lm_cumul <- summary(mod_cumul)
    ci_slope_new <- c(summ_lm_new$coefficients[2, 1] - qnorm(0.975) * 
        summ_lm_new$coefficients[2, 2], summ_lm_new$coefficients[2, 
        1] + qnorm(0.975) * summ_lm_new$coefficients[2, 2])
    print(paste0("Estimated slope and its 95% confidence interval (new): ", 
        format(round(summ_lm_new$coefficients[2, 1], 3), nsmall = 3), 
        " (", format(round(ci_slope_new[1], 3), nsmall = 3), 
        ",", format(round(ci_slope_new[2], 3), nsmall = 3), ")"))
    print(paste0("Half-life in days and its 95% confidence interval (new): ", 
        format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
            1], 3), nsmall = 3), " (", format(round((-1) * log(2)/ci_slope_new[1], 
            3), nsmall = 3), ",", format((-1) * round(log(2)/ci_slope_new[2], 
            3), nsmall = 3), ")"))
    ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 1] - qnorm(0.975) * 
        summ_lm_cumul$coefficients[2, 2], summ_lm_cumul$coefficients[2, 
        1] + qnorm(0.975) * summ_lm_cumul$coefficients[2, 2])
    print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
        format(round(summ_lm_cumul$coefficients[2, 1], 3), nsmall = 3), 
        " (", format(round(ci_slope_cumul[1], 3), nsmall = 3), 
        ",", format(round(ci_slope_cumul[2], 3), nsmall = 3), 
        ")"))
    print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
        format(round(log(2)/summ_lm_cumul$coefficients[2, 1], 
            3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
            3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
            3), nsmall = 3), ")"))
} else {
    print(c(NA, NA))
}
debug at #35: data_for_lm <- data
debug at #36: if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
    data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
        dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
        dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
}
debug at #37: data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
    dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
    dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
function () 
{
    from_context("..group_size")
}
<bytecode: 0x000002a1be03caf8>
<environment: namespace:dplyr>
function () 
{
    from_context("..group_size")
}
<bytecode: 0x000002a1be03caf8>
<environment: namespace:dplyr>
function () 
{
    from_context("..group_size")
}
<bytecode: 0x000002a1be03caf8>
<environment: namespace:dplyr>
debugging in: (function(data, key, b_dodaily, b_donumtest, b_dolog,b_onlycumul,b_do_lm_numtest){
    res<-ggplot(data = data) 
    vMSE<-c()
    if (! b_donumtest){
\tres<-res+geom_line(aes(x = date, y = confirmed_scaled, color = '(IT) Confirmed/Tests')) 
\tvMSE<-c(vMSE,confirmed_scaled_all=sqrt(mean((data$confirmed_scaled-dp$confirmed_scaled[1:nrow(data)])^2,na.rm=TRUE)))
\tvMSE<-c(vMSE,confirmed_scaled_dp=sqrt(mean((data$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))]-dp$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))])^2,na.rm=TRUE)))
\t    if ((!b_onlycumul)&&!(b_scale_2020deaths)){
\t\tres<-res+geom_line(aes(x = date, y = deaths_scaled, color = "(IT) Deaths Scaled"))
\t\tvMSE<-c(vMSE,deaths_scaled=sqrt(mean((data$deaths_scaled-dp$confirmed_scaled[1:nrow(data)])^2,na.rm=TRUE)))
\t    \tvMSE<-c(vMSE,deaths_scaled_dp=sqrt(mean((data$deaths_scaled[1:min(nrow(data),length(dp$confirmed_scaled))]-dp$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))])^2,na.rm=TRUE)))
\t    }
\t    if (b_dodaily){
\t\tres<-res+geom_line(aes(x = date, y = confirmed_new_scaled, color = '(IT) Daily Confirmed/Tests'))
\t\tvMSE<-c(vMSE,confirmed_new_scaled=sqrt(mean((data$confirmed_new_scaled-dp$confirmed_scaled[1:nrow(data)])^2,na.rm=TRUE)))
\t    \tvMSE<-c(vMSE,confirmed_new_scaled_dp=sqrt(mean((data$confirmed_new_scaled[1:min(nrow(data),length(dp$confirmed_scaled))]-dp$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))])^2,na.rm=TRUE)))
\t    }
\txdp <- dp[1:nrow(data),]
\txdp$date <- data$date[1:nrow(data)]
\tres<-res+geom_line(data = xdp, size = 2, aes(x = date, y = confirmed_scaled, color = '(DP) Confirmed Scaled')) 
    }else{
    \t    res<-res+geom_line(aes(x = date, y = confirmed_new_gr, color = "(IT) Confirmed")) +
\t\tgeom_line(aes(x = date, y = tests_new_gr, color = '(IT) Tests')) 
\t    if (b_dolog){
\t\tres<-res+geom_line(aes(x = date, y = diff_confirmed_new, color = '(IT) Confirmed - Tests'))
\t\tres<-res+geom_line(aes(x = date, y = diff_confirmed_cumul, color = '(IT) Confirmed - Tests cumulative'))
\t\tif (b_do_lm_numtest){
\t\t    c_reg<-strsplit(data$id[1],", ")[[1]][2]
\t\t    if (is.na(c_reg)){c_reg<-"Italy"}
\t\t    dfdata_cutoff<-read.csv("NumTest_dates.csv",header=TRUE,sep=";")
\t\t    i_reg<-which(dfdata_cutoff$region==c_reg)
\t\t    sink("LM_difflogcofirmestested_slopeontime.txt",append=TRUE)
\t\t    print(c_reg)
\t\t    if (!is.na(dfdata_cutoff[i_reg,"date_cutoff"])){
\t\t\tdata_for_lm<-data
\t\t\tif (!is.na(dfdata_cutoff[i_reg,"remove_datefrom"])){
\t\t\t    data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date>=dfdata_cutoff[i_reg,"remove_datefrom"]),which(data_for_lm$date<=dfdata_cutoff[i_reg,"remove_dateto"]))]<-NA
\t\t\t    ##data_for_lm$diff_confirmed_cumul[intersect(which(data_for_lm$date>=dfdata_cutoff[i_reg,"remove_datefrom"]),which(data_for_lm$date<=dfdata_cutoff[i_reg,"remove_dateto"]))]<-NA
\t\t\t}
\t\t\tdata_for_lm<-data_for_lm[which(data_for_lm$date>=dfdata_cutoff[i_reg,"date_cutoff"]),]
\t\t\tif (!is.na(dfdata_cutoff[i_reg,"end_date"])){
\t\t\t    data_for_lm<-data_for_lm[which(data_for_lm$date<=dfdata_cutoff[i_reg,"end_date"]),]
\t\t\t}
\t\t\tdata_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new),is.nan(data_for_lm$diff_confirmed_new)))]<-NA
\t\t\tdata_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul),is.nan(data_for_lm$diff_confirmed_cumul)))]<-NA
\t\t\tdata_for_lm$t <- 1:nrow(data_for_lm)
\t\t\tmod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm,na.action="na.exclude")
\t\t\tci_new <- predict(mod_new, newdata = data_for_lm, interval = 'prediction')
\t\t\tmod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm,na.action="na.exclude")
\t\t\tci_cumul <- predict(mod_new, newdata = data_for_lm, interval = 'prediction')
\t\t\tdata$ci_lwr_new<-NA
\t\t\tdata$ci_upr_new<-NA\t\t\t
\t\t\tdata$pred_diff_new<-NA\t\t\t
\t\t\tdata$ci_lwr_cumul<-NA
\t\t\tdata$ci_upr_cumul<-NA\t\t\t
\t\t\tdata$pred_diff_cumul<-NA\t\t\t
\t\t\tv_dates_for_lm_indices<-which(data$date>=dfdata_cutoff[i_reg,"date_cutoff"])
\t\t\tif (!is.na(dfdata_cutoff[i_reg,"end_date"])){
\t\t\t    v_dates_for_lm_indices<-intersect(v_dates_for_lm_indices,which(data_for_lm$date<=dfdata_cutoff[i_reg,"end_date"]))
\t\t\t}
\t\t\tdata$pred_diff_new[v_dates_for_lm_indices]<-ci_new[,1]
\t\t\tdata$ci_lwr_new[v_dates_for_lm_indices]<-ci_new[,2]
\t\t\tdata$ci_upr_new[v_dates_for_lm_indices]<-ci_new[,3]
\t\t\tdata$pred_diff_cumul[v_dates_for_lm_indices]<-ci_cumul[,1]
\t\t\tdata$ci_lwr_cumul[v_dates_for_lm_indices]<-ci_cumul[,2]
\t\t\tdata$ci_upr_cumul[v_dates_for_lm_indices]<-ci_cumul[,3]

\t\t\t#res<-res+  geom_line(aes(y = ci[,1],)) +   geom_ribbon(aes(ymin = ci[,2], ymax = ci[,3]), alpha = 0.4) 
\t\t\t#res<-res+   geom_ribbon(aes(x=date,ymin = data$ci_lwr, ymax = data$ci_upr), alpha = 0.4) 
\t\t\tif (is.na(dfdata_cutoff[i_reg,"end_date"])){
\t\t\t    #res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])), aes(x=date,ymin = ci_lwr_new, ymax = ci_upr_new), alpha = 0.4) 
\t\t\t    res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])), aes(x=date,ymin = ci_lwr_cumul, ymax = ci_upr_cumul), alpha = 0.4) 
\t\t\t    
\t\t\t    #res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])),aes(x=date,y = pred_diff_new))
\t\t\t    res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])),aes(x=date,y = pred_diff_cumul))
\t\t\t}else{
\t\t\t    res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])), aes(x=date,ymin = ci_lwr_new, ymax = ci_upr_new), alpha = 0.4) 
\t\t\t    res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])), aes(x=date,ymin = ci_lwr_cumul, ymax = ci_upr_cumul), alpha = 0.4) 
\t\t\t    
\t\t\t    res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])),aes(x=date,y = pred_diff_new))
\t\t\t    res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])),aes(x=date,y = pred_diff_cumul))
\t\t\t}
\t\t\tsumm_lm_new<-summary(mod_new)
\t\t\tsumm_lm_cumul<-summary(mod_cumul)
\t\t\tci_slope_new<-c(summ_lm_new$coefficients[2,1]-qnorm(0.975)*summ_lm_new$coefficients[2,2],summ_lm_new$coefficients[2,1]+qnorm(0.975)*summ_lm_new$coefficients[2,2])
\t\t\tprint(paste0("Estimated slope and its 95% confidence interval (new): ",format(round(summ_lm_new$coefficients[2,1], 3), nsmall = 3)," (",format(round(ci_slope_new[1], 3), nsmall = 3),",",format(round(ci_slope_new[2], 3), nsmall = 3),")"))
\t\t\tprint(paste0("Half-life in days and its 95% confidence interval (new): ",format(round((-1)*log(2)/summ_lm_new$coefficients[2,1], 3), nsmall = 3)," (",format(round((-1)*log(2)/ci_slope_new[1], 3), nsmall = 3),",",format((-1)*round(log(2)/ci_slope_new[2], 3), nsmall = 3),")"))

\t\t\tci_slope_cumul<-c(summ_lm_cumul$coefficients[2,1]-qnorm(0.975)*summ_lm_cumul$coefficients[2,2],summ_lm_cumul$coefficients[2,1]+qnorm(0.975)*summ_lm_cumul$coefficients[2,2])
\t\t\tprint(paste0("Estimated slope and its 95% confidence interval (cumulative): ",format(round(summ_lm_cumul$coefficients[2,1], 3), nsmall = 3)," (",format(round(ci_slope_cumul[1], 3), nsmall = 3),",",format(round(ci_slope_cumul[2], 3), nsmall = 3),")"))
\t\t\tprint(paste0("Doubling time in days and its 95% confidence interval (cumulative): ",format(round(log(2)/summ_lm_cumul$coefficients[2,1], 3), nsmall = 3)," (",format(round(log(2)/ci_slope_cumul[2], 3), nsmall = 3),",",format(round(log(2)/ci_slope_cumul[1], 3), nsmall = 3),")"))
\t\t    }else{
\t\t\tprint(c(NA,NA))
\t\t    }
\t\t    print("=======================================")
\t\t    sink()
\t\t}
\t    }
    }    
    if (b_scale_2020deaths){
        if (b_plot_COVIDexcessfrac){
            res<-res+geom_line(aes(x = date, y = excess_death_frac, color = "(IT) COVID frac excess deaths")) \t
    \t}
        res<-res+geom_line(aes(x = date, y = weekly_death_frac, color = "(IT) COVID frac weekly deaths")) \t
        res<-res+geom_line(aes(x = date, y = weekly_death_frac_pastavg, color = "(IT) COVID frac weekly deaths wrt past")) \t
        res<-res+geom_line(aes(x = date, y = cumul_death_frac, color = "(IT) COVID frac cumul deaths")) \t
        res<-res+geom_line(aes(x = date, y = cumul_death_frac_pastavg, color = "(IT) COVID frac cumul deaths wrt past")) \t
        res<-res+geom_line(aes(x = date, y = death_2020_ratio, color = "(IT) deaths in 2020 wrt past")) \t
    }
    title <- ifelse(is.na(key$administrative_area_level_2), key$administrative_area_level_1, key$administrative_area_level_2)
    if(b_dolog) title <- paste(title,"(log)")
    res <- res + ggtitle(title) + ylab("") + xlab("") + theme(legend.title = element_blank())
    res
    list(grplot=res,MSE=vMSE, title = title)
})(dots[[1L]][[1L]], dots[[2L]][[1L]], FALSE, TRUE, TRUE, FALSE, 
    TRUE)
debug at #1: {
    res <- ggplot(data = data)
    vMSE <- c()
    if (!b_donumtest) {
        res <- res + geom_line(aes(x = date, y = confirmed_scaled, 
            color = "(IT) Confirmed/Tests"))
        vMSE <- c(vMSE, confirmed_scaled_all = sqrt(mean((data$confirmed_scaled - 
            dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
        vMSE <- c(vMSE, confirmed_scaled_dp = sqrt(mean((data$confirmed_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
        if ((!b_onlycumul) && !(b_scale_2020deaths)) {
            res <- res + geom_line(aes(x = date, y = deaths_scaled, 
                color = "(IT) Deaths Scaled"))
            vMSE <- c(vMSE, deaths_scaled = sqrt(mean((data$deaths_scaled - 
                dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
            vMSE <- c(vMSE, deaths_scaled_dp = sqrt(mean((data$deaths_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
        }
        if (b_dodaily) {
            res <- res + geom_line(aes(x = date, y = confirmed_new_scaled, 
                color = "(IT) Daily Confirmed/Tests"))
            vMSE <- c(vMSE, confirmed_new_scaled = sqrt(mean((data$confirmed_new_scaled - 
                dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
            vMSE <- c(vMSE, confirmed_new_scaled_dp = sqrt(mean((data$confirmed_new_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
        }
        xdp <- dp[1:nrow(data), ]
        xdp$date <- data$date[1:nrow(data)]
        res <- res + geom_line(data = xdp, size = 2, aes(x = date, 
            y = confirmed_scaled, color = "(DP) Confirmed Scaled"))
    }
    else {
        res <- res + geom_line(aes(x = date, y = confirmed_new_gr, 
            color = "(IT) Confirmed")) + geom_line(aes(x = date, 
            y = tests_new_gr, color = "(IT) Tests"))
        if (b_dolog) {
            res <- res + geom_line(aes(x = date, y = diff_confirmed_new, 
                color = "(IT) Confirmed - Tests"))
            res <- res + geom_line(aes(x = date, y = diff_confirmed_cumul, 
                color = "(IT) Confirmed - Tests cumulative"))
            if (b_do_lm_numtest) {
                c_reg <- strsplit(data$id[1], ", ")[[1]][2]
                if (is.na(c_reg)) {
                  c_reg <- "Italy"
                }
                dfdata_cutoff <- read.csv("NumTest_dates.csv", 
                  header = TRUE, sep = ";")
                i_reg <- which(dfdata_cutoff$region == c_reg)
                sink("LM_difflogcofirmestested_slopeontime.txt", 
                  append = TRUE)
                print(c_reg)
                if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
                  data_for_lm <- data
                  if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
                    data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
                      dfdata_cutoff[i_reg, "remove_datefrom"]), 
                      which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                        "remove_dateto"]))] <- NA
                  }
                  data_for_lm <- data_for_lm[which(data_for_lm$date >= 
                    dfdata_cutoff[i_reg, "date_cutoff"]), ]
                  if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                    data_for_lm <- data_for_lm[which(data_for_lm$date <= 
                      dfdata_cutoff[i_reg, "end_date"]), ]
                  }
                  data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
                    is.nan(data_for_lm$diff_confirmed_new)))] <- NA
                  data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
                    is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
                  data_for_lm$t <- 1:nrow(data_for_lm)
                  mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
                    na.action = "na.exclude")
                  ci_new <- predict(mod_new, newdata = data_for_lm, 
                    interval = "prediction")
                  mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
                    na.action = "na.exclude")
                  ci_cumul <- predict(mod_new, newdata = data_for_lm, 
                    interval = "prediction")
                  data$ci_lwr_new <- NA
                  data$ci_upr_new <- NA
                  data$pred_diff_new <- NA
                  data$ci_lwr_cumul <- NA
                  data$ci_upr_cumul <- NA
                  data$pred_diff_cumul <- NA
                  v_dates_for_lm_indices <- which(data$date >= 
                    dfdata_cutoff[i_reg, "date_cutoff"])
                  if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                    v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
                      which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                        "end_date"]))
                  }
                  data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 
                    1]
                  data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 
                    2]
                  data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 
                    3]
                  data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                    1]
                  data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                    2]
                  data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                    3]
                  if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
                    res <- res + geom_ribbon(data = data %>% 
                      filter(date >= as.Date(dfdata_cutoff[i_reg, 
                        "date_cutoff"])), aes(x = date, ymin = ci_lwr_cumul, 
                      ymax = ci_upr_cumul), alpha = 0.4)
                    res <- res + geom_line(data = data %>% filter(date >= 
                      as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                      aes(x = date, y = pred_diff_cumul))
                  }
                  else {
                    res <- res + geom_ribbon(data = data %>% 
                      filter(date >= as.Date(dfdata_cutoff[i_reg, 
                        "date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, ymin = ci_lwr_new, 
                      ymax = ci_upr_new), alpha = 0.4)
                    res <- res + geom_ribbon(data = data %>% 
                      filter(date >= as.Date(dfdata_cutoff[i_reg, 
                        "date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, ymin = ci_lwr_cumul, 
                      ymax = ci_upr_cumul), alpha = 0.4)
                    res <- res + geom_line(data = data %>% filter(date >= 
                      as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                      filter(date <= as.Date(dfdata_cutoff[i_reg, 
                        "end_date"])), aes(x = date, y = pred_diff_new))
                    res <- res + geom_line(data = data %>% filter(date >= 
                      as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                      filter(date <= as.Date(dfdata_cutoff[i_reg, 
                        "end_date"])), aes(x = date, y = pred_diff_cumul))
                  }
                  summ_lm_new <- summary(mod_new)
                  summ_lm_cumul <- summary(mod_cumul)
                  ci_slope_new <- c(summ_lm_new$coefficients[2, 
                    1] - qnorm(0.975) * summ_lm_new$coefficients[2, 
                    2], summ_lm_new$coefficients[2, 1] + qnorm(0.975) * 
                    summ_lm_new$coefficients[2, 2])
                  print(paste0("Estimated slope and its 95% confidence interval (new): ", 
                    format(round(summ_lm_new$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round(ci_slope_new[1], 
                      3), nsmall = 3), ",", format(round(ci_slope_new[2], 
                      3), nsmall = 3), ")"))
                  print(paste0("Half-life in days and its 95% confidence interval (new): ", 
                    format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round((-1) * 
                      log(2)/ci_slope_new[1], 3), nsmall = 3), 
                    ",", format((-1) * round(log(2)/ci_slope_new[2], 
                      3), nsmall = 3), ")"))
                  ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 
                    1] - qnorm(0.975) * summ_lm_cumul$coefficients[2, 
                    2], summ_lm_cumul$coefficients[2, 1] + qnorm(0.975) * 
                    summ_lm_cumul$coefficients[2, 2])
                  print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
                    format(round(summ_lm_cumul$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round(ci_slope_cumul[1], 
                      3), nsmall = 3), ",", format(round(ci_slope_cumul[2], 
                      3), nsmall = 3), ")"))
                  print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
                    format(round(log(2)/summ_lm_cumul$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
                      3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
                      3), nsmall = 3), ")"))
                }
                else {
                  print(c(NA, NA))
                }
                print("=======================================")
                sink()
            }
        }
    }
    if (b_scale_2020deaths) {
        if (b_plot_COVIDexcessfrac) {
            res <- res + geom_line(aes(x = date, y = excess_death_frac, 
                color = "(IT) COVID frac excess deaths"))
        }
        res <- res + geom_line(aes(x = date, y = weekly_death_frac, 
            color = "(IT) COVID frac weekly deaths"))
        res <- res + geom_line(aes(x = date, y = weekly_death_frac_pastavg, 
            color = "(IT) COVID frac weekly deaths wrt past"))
        res <- res + geom_line(aes(x = date, y = cumul_death_frac, 
            color = "(IT) COVID frac cumul deaths"))
        res <- res + geom_line(aes(x = date, y = cumul_death_frac_pastavg, 
            color = "(IT) COVID frac cumul deaths wrt past"))
        res <- res + geom_line(aes(x = date, y = death_2020_ratio, 
            color = "(IT) deaths in 2020 wrt past"))
    }
    title <- ifelse(is.na(key$administrative_area_level_2), key$administrative_area_level_1, 
        key$administrative_area_level_2)
    if (b_dolog) 
        title <- paste(title, "(log)")
    res <- res + ggtitle(title) + ylab("") + xlab("") + theme(legend.title = element_blank())
    res
    list(grplot = res, MSE = vMSE, title = title)
}
debug at #2: res <- ggplot(data = data)
# A tibble: 1 x 0
debug at #33: print(c_reg)
[1] "Abruzzo"
debug at #34: if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
    data_for_lm <- data
    if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
        data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
            dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
            dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
    }
    data_for_lm <- data_for_lm[which(data_for_lm$date >= dfdata_cutoff[i_reg, 
        "date_cutoff"]), ]
    if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
        data_for_lm <- data_for_lm[which(data_for_lm$date <= 
            dfdata_cutoff[i_reg, "end_date"]), ]
    }
    data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
        is.nan(data_for_lm$diff_confirmed_new)))] <- NA
    data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
        is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
    data_for_lm$t <- 1:nrow(data_for_lm)
    mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
        na.action = "na.exclude")
    ci_new <- predict(mod_new, newdata = data_for_lm, interval = "prediction")
    mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
        na.action = "na.exclude")
    ci_cumul <- predict(mod_new, newdata = data_for_lm, interval = "prediction")
    data$ci_lwr_new <- NA
    data$ci_upr_new <- NA
    data$pred_diff_new <- NA
    data$ci_lwr_cumul <- NA
    data$ci_upr_cumul <- NA
    data$pred_diff_cumul <- NA
    v_dates_for_lm_indices <- which(data$date >= dfdata_cutoff[i_reg, 
        "date_cutoff"])
    if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
        v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
            which(data_for_lm$date <= dfdata_cutoff[i_reg, "end_date"]))
    }
    data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 1]
    data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 2]
    data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 3]
    data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
        1]
    data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 2]
    data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 3]
    if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
        res <- res + geom_ribbon(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), aes(x = date, 
            ymin = ci_lwr_cumul, ymax = ci_upr_cumul), alpha = 0.4)
        res <- res + geom_line(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), aes(x = date, 
            y = pred_diff_cumul))
    }
    else {
        res <- res + geom_ribbon(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, ymin = ci_lwr_new, ymax = ci_upr_new), 
            alpha = 0.4)
        res <- res + geom_ribbon(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
            alpha = 0.4)
        res <- res + geom_line(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, y = pred_diff_new))
        res <- res + geom_line(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, y = pred_diff_cumul))
    }
    summ_lm_new <- summary(mod_new)
    summ_lm_cumul <- summary(mod_cumul)
    ci_slope_new <- c(summ_lm_new$coefficients[2, 1] - qnorm(0.975) * 
        summ_lm_new$coefficients[2, 2], summ_lm_new$coefficients[2, 
        1] + qnorm(0.975) * summ_lm_new$coefficients[2, 2])
    print(paste0("Estimated slope and its 95% confidence interval (new): ", 
        format(round(summ_lm_new$coefficients[2, 1], 3), nsmall = 3), 
        " (", format(round(ci_slope_new[1], 3), nsmall = 3), 
        ",", format(round(ci_slope_new[2], 3), nsmall = 3), ")"))
    print(paste0("Half-life in days and its 95% confidence interval (new): ", 
        format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
            1], 3), nsmall = 3), " (", format(round((-1) * log(2)/ci_slope_new[1], 
            3), nsmall = 3), ",", format((-1) * round(log(2)/ci_slope_new[2], 
            3), nsmall = 3), ")"))
    ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 1] - qnorm(0.975) * 
        summ_lm_cumul$coefficients[2, 2], summ_lm_cumul$coefficients[2, 
        1] + qnorm(0.975) * summ_lm_cumul$coefficients[2, 2])
    print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
        format(round(summ_lm_cumul$coefficients[2, 1], 3), nsmall = 3), 
        " (", format(round(ci_slope_cumul[1], 3), nsmall = 3), 
        ",", format(round(ci_slope_cumul[2], 3), nsmall = 3), 
        ")"))
    print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
        format(round(log(2)/summ_lm_cumul$coefficients[2, 1], 
            3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
            3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
            3), nsmall = 3), ")"))
} else {
    print(c(NA, NA))
}
debug at #35: data_for_lm <- data
debug at #36: if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
    data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
        dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
        dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
}
debug at #37: data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
    dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
    dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
function () 
{
    from_context("..group_size")
}
<bytecode: 0x000002b8fc8b44f0>
<environment: namespace:dplyr>
[1] "Abruzzo"
debugging in: (function(data, key, b_dodaily, b_donumtest, b_dolog,b_onlycumul,b_do_lm_numtest){
    res<-ggplot(data = data) 
    vMSE<-c()
    if (! b_donumtest){
\tres<-res+geom_line(aes(x = date, y = confirmed_scaled, color = '(IT) Confirmed/Tests')) 
\tvMSE<-c(vMSE,confirmed_scaled_all=sqrt(mean((data$confirmed_scaled-dp$confirmed_scaled[1:nrow(data)])^2,na.rm=TRUE)))
\tvMSE<-c(vMSE,confirmed_scaled_dp=sqrt(mean((data$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))]-dp$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))])^2,na.rm=TRUE)))
\t    if ((!b_onlycumul)&&!(b_scale_2020deaths)){
\t\tres<-res+geom_line(aes(x = date, y = deaths_scaled, color = "(IT) Deaths Scaled"))
\t\tvMSE<-c(vMSE,deaths_scaled=sqrt(mean((data$deaths_scaled-dp$confirmed_scaled[1:nrow(data)])^2,na.rm=TRUE)))
\t    \tvMSE<-c(vMSE,deaths_scaled_dp=sqrt(mean((data$deaths_scaled[1:min(nrow(data),length(dp$confirmed_scaled))]-dp$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))])^2,na.rm=TRUE)))
\t    }
\t    if (b_dodaily){
\t\tres<-res+geom_line(aes(x = date, y = confirmed_new_scaled, color = '(IT) Daily Confirmed/Tests'))
\t\tvMSE<-c(vMSE,confirmed_new_scaled=sqrt(mean((data$confirmed_new_scaled-dp$confirmed_scaled[1:nrow(data)])^2,na.rm=TRUE)))
\t    \tvMSE<-c(vMSE,confirmed_new_scaled_dp=sqrt(mean((data$confirmed_new_scaled[1:min(nrow(data),length(dp$confirmed_scaled))]-dp$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))])^2,na.rm=TRUE)))
\t    }
\txdp <- dp[1:nrow(data),]
\txdp$date <- data$date[1:nrow(data)]
\tres<-res+geom_line(data = xdp, size = 2, aes(x = date, y = confirmed_scaled, color = '(DP) Confirmed Scaled')) 
    }else{
    \t    res<-res+geom_line(aes(x = date, y = confirmed_new_gr, color = "(IT) Confirmed")) +
\t\tgeom_line(aes(x = date, y = tests_new_gr, color = '(IT) Tests')) 
\t    if (b_dolog){
\t\tres<-res+geom_line(aes(x = date, y = diff_confirmed_new, color = '(IT) Confirmed - Tests'))
\t\tres<-res+geom_line(aes(x = date, y = diff_confirmed_cumul, color = '(IT) Confirmed - Tests cumulative'))
\t\tif (b_do_lm_numtest){
\t\t    c_reg<-key[['administrative_area_level_2']]
\t\t    if (is.na(c_reg)){c_reg<-"Italy"}
\t\t    dfdata_cutoff<-read.csv("NumTest_dates.csv",header=TRUE,sep=";")
\t\t    i_reg<-which(dfdata_cutoff$region==c_reg)
\t\t    sink("LM_difflogcofirmestested_slopeontime.txt",append=TRUE)
\t\t    print(c_reg)
\t\t    if (!is.na(dfdata_cutoff[i_reg,"date_cutoff"])){
\t\t\tdata_for_lm<-data
\t\t\tif (!is.na(dfdata_cutoff[i_reg,"remove_datefrom"])){
\t\t\t    data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date>=dfdata_cutoff[i_reg,"remove_datefrom"]),which(data_for_lm$date<=dfdata_cutoff[i_reg,"remove_dateto"]))]<-NA
\t\t\t    ##data_for_lm$diff_confirmed_cumul[intersect(which(data_for_lm$date>=dfdata_cutoff[i_reg,"remove_datefrom"]),which(data_for_lm$date<=dfdata_cutoff[i_reg,"remove_dateto"]))]<-NA
\t\t\t}
\t\t\tdata_for_lm<-data_for_lm[which(data_for_lm$date>=dfdata_cutoff[i_reg,"date_cutoff"]),]
\t\t\tif (!is.na(dfdata_cutoff[i_reg,"end_date"])){
\t\t\t    data_for_lm<-data_for_lm[which(data_for_lm$date<=dfdata_cutoff[i_reg,"end_date"]),]
\t\t\t}
\t\t\tdata_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new),is.nan(data_for_lm$diff_confirmed_new)))]<-NA
\t\t\tdata_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul),is.nan(data_for_lm$diff_confirmed_cumul)))]<-NA
\t\t\tdata_for_lm$t <- 1:nrow(data_for_lm)
\t\t\tmod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm,na.action="na.exclude")
\t\t\tci_new <- predict(mod_new, newdata = data_for_lm, interval = 'prediction')
\t\t\tmod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm,na.action="na.exclude")
\t\t\tci_cumul <- predict(mod_new, newdata = data_for_lm, interval = 'prediction')
\t\t\tdata$ci_lwr_new<-NA
\t\t\tdata$ci_upr_new<-NA\t\t\t
\t\t\tdata$pred_diff_new<-NA\t\t\t
\t\t\tdata$ci_lwr_cumul<-NA
\t\t\tdata$ci_upr_cumul<-NA\t\t\t
\t\t\tdata$pred_diff_cumul<-NA\t\t\t
\t\t\tv_dates_for_lm_indices<-which(data$date>=dfdata_cutoff[i_reg,"date_cutoff"])
\t\t\tif (!is.na(dfdata_cutoff[i_reg,"end_date"])){
\t\t\t    v_dates_for_lm_indices<-intersect(v_dates_for_lm_indices,which(data_for_lm$date<=dfdata_cutoff[i_reg,"end_date"]))
\t\t\t}
\t\t\tdata$pred_diff_new[v_dates_for_lm_indices]<-ci_new[,1]
\t\t\tdata$ci_lwr_new[v_dates_for_lm_indices]<-ci_new[,2]
\t\t\tdata$ci_upr_new[v_dates_for_lm_indices]<-ci_new[,3]
\t\t\tdata$pred_diff_cumul[v_dates_for_lm_indices]<-ci_cumul[,1]
\t\t\tdata$ci_lwr_cumul[v_dates_for_lm_indices]<-ci_cumul[,2]
\t\t\tdata$ci_upr_cumul[v_dates_for_lm_indices]<-ci_cumul[,3]

\t\t\t#res<-res+  geom_line(aes(y = ci[,1],)) +   geom_ribbon(aes(ymin = ci[,2], ymax = ci[,3]), alpha = 0.4) 
\t\t\t#res<-res+   geom_ribbon(aes(x=date,ymin = data$ci_lwr, ymax = data$ci_upr), alpha = 0.4) 
\t\t\tif (is.na(dfdata_cutoff[i_reg,"end_date"])){
\t\t\t    #res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])), aes(x=date,ymin = ci_lwr_new, ymax = ci_upr_new), alpha = 0.4) 
\t\t\t    res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])), aes(x=date,ymin = ci_lwr_cumul, ymax = ci_upr_cumul), alpha = 0.4) 
\t\t\t    
\t\t\t    #res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])),aes(x=date,y = pred_diff_new))
\t\t\t    res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])),aes(x=date,y = pred_diff_cumul))
\t\t\t}else{
\t\t\t    res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])), aes(x=date,ymin = ci_lwr_new, ymax = ci_upr_new), alpha = 0.4) 
\t\t\t    res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])), aes(x=date,ymin = ci_lwr_cumul, ymax = ci_upr_cumul), alpha = 0.4) 
\t\t\t    
\t\t\t    res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])),aes(x=date,y = pred_diff_new))
\t\t\t    res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])),aes(x=date,y = pred_diff_cumul))
\t\t\t}
\t\t\tsumm_lm_new<-summary(mod_new)
\t\t\tsumm_lm_cumul<-summary(mod_cumul)
\t\t\tci_slope_new<-c(summ_lm_new$coefficients[2,1]-qnorm(0.975)*summ_lm_new$coefficients[2,2],summ_lm_new$coefficients[2,1]+qnorm(0.975)*summ_lm_new$coefficients[2,2])
\t\t\tprint(paste0("Estimated slope and its 95% confidence interval (new): ",format(round(summ_lm_new$coefficients[2,1], 3), nsmall = 3)," (",format(round(ci_slope_new[1], 3), nsmall = 3),",",format(round(ci_slope_new[2], 3), nsmall = 3),")"))
\t\t\tprint(paste0("Half-life in days and its 95% confidence interval (new): ",format(round((-1)*log(2)/summ_lm_new$coefficients[2,1], 3), nsmall = 3)," (",format(round((-1)*log(2)/ci_slope_new[1], 3), nsmall = 3),",",format((-1)*round(log(2)/ci_slope_new[2], 3), nsmall = 3),")"))

\t\t\tci_slope_cumul<-c(summ_lm_cumul$coefficients[2,1]-qnorm(0.975)*summ_lm_cumul$coefficients[2,2],summ_lm_cumul$coefficients[2,1]+qnorm(0.975)*summ_lm_cumul$coefficients[2,2])
\t\t\tprint(paste0("Estimated slope and its 95% confidence interval (cumulative): ",format(round(summ_lm_cumul$coefficients[2,1], 3), nsmall = 3)," (",format(round(ci_slope_cumul[1], 3), nsmall = 3),",",format(round(ci_slope_cumul[2], 3), nsmall = 3),")"))
\t\t\tprint(paste0("Doubling time in days and its 95% confidence interval (cumulative): ",format(round(log(2)/summ_lm_cumul$coefficients[2,1], 3), nsmall = 3)," (",format(round(log(2)/ci_slope_cumul[2], 3), nsmall = 3),",",format(round(log(2)/ci_slope_cumul[1], 3), nsmall = 3),")"))
\t\t    }else{
\t\t\tprint(c(NA,NA))
\t\t    }
\t\t    print("=======================================")
\t\t    sink()
\t\t}
\t    }
    }    
    if (b_scale_2020deaths){
        if (b_plot_COVIDexcessfrac){
            res<-res+geom_line(aes(x = date, y = excess_death_frac, color = "(IT) COVID frac excess deaths")) \t
    \t}
        res<-res+geom_line(aes(x = date, y = weekly_death_frac, color = "(IT) COVID frac weekly deaths")) \t
        res<-res+geom_line(aes(x = date, y = weekly_death_frac_pastavg, color = "(IT) COVID frac weekly deaths wrt past")) \t
        res<-res+geom_line(aes(x = date, y = cumul_death_frac, color = "(IT) COVID frac cumul deaths")) \t
        res<-res+geom_line(aes(x = date, y = cumul_death_frac_pastavg, color = "(IT) COVID frac cumul deaths wrt past")) \t
        res<-res+geom_line(aes(x = date, y = death_2020_ratio, color = "(IT) deaths in 2020 wrt past")) \t
    }
    title <- ifelse(is.na(key$administrative_area_level_2), key$administrative_area_level_1, key$administrative_area_level_2)
    if(b_dolog) title <- paste(title,"(log)")
    res <- res + ggtitle(title) + ylab("") + xlab("") + theme(legend.title = element_blank())
    res
    list(grplot=res,MSE=vMSE, title = title)
})(dots[[1L]][[1L]], dots[[2L]][[1L]], FALSE, TRUE, TRUE, FALSE, 
    TRUE)
debug at #1: {
    res <- ggplot(data = data)
    vMSE <- c()
    if (!b_donumtest) {
        res <- res + geom_line(aes(x = date, y = confirmed_scaled, 
            color = "(IT) Confirmed/Tests"))
        vMSE <- c(vMSE, confirmed_scaled_all = sqrt(mean((data$confirmed_scaled - 
            dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
        vMSE <- c(vMSE, confirmed_scaled_dp = sqrt(mean((data$confirmed_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
        if ((!b_onlycumul) && !(b_scale_2020deaths)) {
            res <- res + geom_line(aes(x = date, y = deaths_scaled, 
                color = "(IT) Deaths Scaled"))
            vMSE <- c(vMSE, deaths_scaled = sqrt(mean((data$deaths_scaled - 
                dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
            vMSE <- c(vMSE, deaths_scaled_dp = sqrt(mean((data$deaths_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
        }
        if (b_dodaily) {
            res <- res + geom_line(aes(x = date, y = confirmed_new_scaled, 
                color = "(IT) Daily Confirmed/Tests"))
            vMSE <- c(vMSE, confirmed_new_scaled = sqrt(mean((data$confirmed_new_scaled - 
                dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
            vMSE <- c(vMSE, confirmed_new_scaled_dp = sqrt(mean((data$confirmed_new_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
        }
        xdp <- dp[1:nrow(data), ]
        xdp$date <- data$date[1:nrow(data)]
        res <- res + geom_line(data = xdp, size = 2, aes(x = date, 
            y = confirmed_scaled, color = "(DP) Confirmed Scaled"))
    }
    else {
        res <- res + geom_line(aes(x = date, y = confirmed_new_gr, 
            color = "(IT) Confirmed")) + geom_line(aes(x = date, 
            y = tests_new_gr, color = "(IT) Tests"))
        if (b_dolog) {
            res <- res + geom_line(aes(x = date, y = diff_confirmed_new, 
                color = "(IT) Confirmed - Tests"))
            res <- res + geom_line(aes(x = date, y = diff_confirmed_cumul, 
                color = "(IT) Confirmed - Tests cumulative"))
            if (b_do_lm_numtest) {
                c_reg <- key[["administrative_area_level_2"]]
                if (is.na(c_reg)) {
                  c_reg <- "Italy"
                }
                dfdata_cutoff <- read.csv("NumTest_dates.csv", 
                  header = TRUE, sep = ";")
                i_reg <- which(dfdata_cutoff$region == c_reg)
                sink("LM_difflogcofirmestested_slopeontime.txt", 
                  append = TRUE)
                print(c_reg)
                if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
                  data_for_lm <- data
                  if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
                    data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
                      dfdata_cutoff[i_reg, "remove_datefrom"]), 
                      which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                        "remove_dateto"]))] <- NA
                  }
                  data_for_lm <- data_for_lm[which(data_for_lm$date >= 
                    dfdata_cutoff[i_reg, "date_cutoff"]), ]
                  if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                    data_for_lm <- data_for_lm[which(data_for_lm$date <= 
                      dfdata_cutoff[i_reg, "end_date"]), ]
                  }
                  data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
                    is.nan(data_for_lm$diff_confirmed_new)))] <- NA
                  data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
                    is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
                  data_for_lm$t <- 1:nrow(data_for_lm)
                  mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
                    na.action = "na.exclude")
                  ci_new <- predict(mod_new, newdata = data_for_lm, 
                    interval = "prediction")
                  mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
                    na.action = "na.exclude")
                  ci_cumul <- predict(mod_new, newdata = data_for_lm, 
                    interval = "prediction")
                  data$ci_lwr_new <- NA
                  data$ci_upr_new <- NA
                  data$pred_diff_new <- NA
                  data$ci_lwr_cumul <- NA
                  data$ci_upr_cumul <- NA
                  data$pred_diff_cumul <- NA
                  v_dates_for_lm_indices <- which(data$date >= 
                    dfdata_cutoff[i_reg, "date_cutoff"])
                  if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                    v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
                      which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                        "end_date"]))
                  }
                  data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 
                    1]
                  data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 
                    2]
                  data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 
                    3]
                  data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                    1]
                  data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                    2]
                  data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                    3]
                  if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
                    res <- res + geom_ribbon(data = data %>% 
                      filter(date >= as.Date(dfdata_cutoff[i_reg, 
                        "date_cutoff"])), aes(x = date, ymin = ci_lwr_cumul, 
                      ymax = ci_upr_cumul), alpha = 0.4)
                    res <- res + geom_line(data = data %>% filter(date >= 
                      as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                      aes(x = date, y = pred_diff_cumul))
                  }
                  else {
                    res <- res + geom_ribbon(data = data %>% 
                      filter(date >= as.Date(dfdata_cutoff[i_reg, 
                        "date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, ymin = ci_lwr_new, 
                      ymax = ci_upr_new), alpha = 0.4)
                    res <- res + geom_ribbon(data = data %>% 
                      filter(date >= as.Date(dfdata_cutoff[i_reg, 
                        "date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, ymin = ci_lwr_cumul, 
                      ymax = ci_upr_cumul), alpha = 0.4)
                    res <- res + geom_line(data = data %>% filter(date >= 
                      as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                      filter(date <= as.Date(dfdata_cutoff[i_reg, 
                        "end_date"])), aes(x = date, y = pred_diff_new))
                    res <- res + geom_line(data = data %>% filter(date >= 
                      as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                      filter(date <= as.Date(dfdata_cutoff[i_reg, 
                        "end_date"])), aes(x = date, y = pred_diff_cumul))
                  }
                  summ_lm_new <- summary(mod_new)
                  summ_lm_cumul <- summary(mod_cumul)
                  ci_slope_new <- c(summ_lm_new$coefficients[2, 
                    1] - qnorm(0.975) * summ_lm_new$coefficients[2, 
                    2], summ_lm_new$coefficients[2, 1] + qnorm(0.975) * 
                    summ_lm_new$coefficients[2, 2])
                  print(paste0("Estimated slope and its 95% confidence interval (new): ", 
                    format(round(summ_lm_new$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round(ci_slope_new[1], 
                      3), nsmall = 3), ",", format(round(ci_slope_new[2], 
                      3), nsmall = 3), ")"))
                  print(paste0("Half-life in days and its 95% confidence interval (new): ", 
                    format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round((-1) * 
                      log(2)/ci_slope_new[1], 3), nsmall = 3), 
                    ",", format((-1) * round(log(2)/ci_slope_new[2], 
                      3), nsmall = 3), ")"))
                  ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 
                    1] - qnorm(0.975) * summ_lm_cumul$coefficients[2, 
                    2], summ_lm_cumul$coefficients[2, 1] + qnorm(0.975) * 
                    summ_lm_cumul$coefficients[2, 2])
                  print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
                    format(round(summ_lm_cumul$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round(ci_slope_cumul[1], 
                      3), nsmall = 3), ",", format(round(ci_slope_cumul[2], 
                      3), nsmall = 3), ")"))
                  print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
                    format(round(log(2)/summ_lm_cumul$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
                      3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
                      3), nsmall = 3), ")"))
                }
                else {
                  print(c(NA, NA))
                }
                print("=======================================")
                sink()
            }
        }
    }
    if (b_scale_2020deaths) {
        if (b_plot_COVIDexcessfrac) {
            res <- res + geom_line(aes(x = date, y = excess_death_frac, 
                color = "(IT) COVID frac excess deaths"))
        }
        res <- res + geom_line(aes(x = date, y = weekly_death_frac, 
            color = "(IT) COVID frac weekly deaths"))
        res <- res + geom_line(aes(x = date, y = weekly_death_frac_pastavg, 
            color = "(IT) COVID frac weekly deaths wrt past"))
        res <- res + geom_line(aes(x = date, y = cumul_death_frac, 
            color = "(IT) COVID frac cumul deaths"))
        res <- res + geom_line(aes(x = date, y = cumul_death_frac_pastavg, 
            color = "(IT) COVID frac cumul deaths wrt past"))
        res <- res + geom_line(aes(x = date, y = death_2020_ratio, 
            color = "(IT) deaths in 2020 wrt past"))
    }
    title <- ifelse(is.na(key$administrative_area_level_2), key$administrative_area_level_1, 
        key$administrative_area_level_2)
    if (b_dolog) 
        title <- paste(title, "(log)")
    res <- res + ggtitle(title) + ylab("") + xlab("") + theme(legend.title = element_blank())
    res
    list(grplot = res, MSE = vMSE, title = title)
}
debug at #2: res <- ggplot(data = data)
debug at #3: vMSE <- c()
debug at #4: if (!b_donumtest) {
    res <- res + geom_line(aes(x = date, y = confirmed_scaled, 
        color = "(IT) Confirmed/Tests"))
    vMSE <- c(vMSE, confirmed_scaled_all = sqrt(mean((data$confirmed_scaled - 
        dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
    vMSE <- c(vMSE, confirmed_scaled_dp = sqrt(mean((data$confirmed_scaled[1:min(nrow(data), 
        length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
        length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
    if ((!b_onlycumul) && !(b_scale_2020deaths)) {
        res <- res + geom_line(aes(x = date, y = deaths_scaled, 
            color = "(IT) Deaths Scaled"))
        vMSE <- c(vMSE, deaths_scaled = sqrt(mean((data$deaths_scaled - 
            dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
        vMSE <- c(vMSE, deaths_scaled_dp = sqrt(mean((data$deaths_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
    }
    if (b_dodaily) {
        res <- res + geom_line(aes(x = date, y = confirmed_new_scaled, 
            color = "(IT) Daily Confirmed/Tests"))
        vMSE <- c(vMSE, confirmed_new_scaled = sqrt(mean((data$confirmed_new_scaled - 
            dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
        vMSE <- c(vMSE, confirmed_new_scaled_dp = sqrt(mean((data$confirmed_new_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
    }
    xdp <- dp[1:nrow(data), ]
    xdp$date <- data$date[1:nrow(data)]
    res <- res + geom_line(data = xdp, size = 2, aes(x = date, 
        y = confirmed_scaled, color = "(DP) Confirmed Scaled"))
} else {
    res <- res + geom_line(aes(x = date, y = confirmed_new_gr, 
        color = "(IT) Confirmed")) + geom_line(aes(x = date, 
        y = tests_new_gr, color = "(IT) Tests"))
    if (b_dolog) {
        res <- res + geom_line(aes(x = date, y = diff_confirmed_new, 
            color = "(IT) Confirmed - Tests"))
        res <- res + geom_line(aes(x = date, y = diff_confirmed_cumul, 
            color = "(IT) Confirmed - Tests cumulative"))
        if (b_do_lm_numtest) {
            c_reg <- key[["administrative_area_level_2"]]
            if (is.na(c_reg)) {
                c_reg <- "Italy"
            }
            dfdata_cutoff <- read.csv("NumTest_dates.csv", header = TRUE, 
                sep = ";")
            i_reg <- which(dfdata_cutoff$region == c_reg)
            sink("LM_difflogcofirmestested_slopeontime.txt", 
                append = TRUE)
            print(c_reg)
            if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
                data_for_lm <- data
                if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
                  data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
                    dfdata_cutoff[i_reg, "remove_datefrom"]), 
                    which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                      "remove_dateto"]))] <- NA
                }
                data_for_lm <- data_for_lm[which(data_for_lm$date >= 
                  dfdata_cutoff[i_reg, "date_cutoff"]), ]
                if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                  data_for_lm <- data_for_lm[which(data_for_lm$date <= 
                    dfdata_cutoff[i_reg, "end_date"]), ]
                }
                data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
                  is.nan(data_for_lm$diff_confirmed_new)))] <- NA
                data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
                  is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
                data_for_lm$t <- 1:nrow(data_for_lm)
                mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
                  na.action = "na.exclude")
                ci_new <- predict(mod_new, newdata = data_for_lm, 
                  interval = "prediction")
                mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
                  na.action = "na.exclude")
                ci_cumul <- predict(mod_new, newdata = data_for_lm, 
                  interval = "prediction")
                data$ci_lwr_new <- NA
                data$ci_upr_new <- NA
                data$pred_diff_new <- NA
                data$ci_lwr_cumul <- NA
                data$ci_upr_cumul <- NA
                data$pred_diff_cumul <- NA
                v_dates_for_lm_indices <- which(data$date >= 
                  dfdata_cutoff[i_reg, "date_cutoff"])
                if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                  v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
                    which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                      "end_date"]))
                }
                data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 
                  1]
                data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 
                  2]
                data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 
                  3]
                data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                  1]
                data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                  2]
                data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                  3]
                if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
                  res <- res + geom_ribbon(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                    aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
                    alpha = 0.4)
                  res <- res + geom_line(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                    aes(x = date, y = pred_diff_cumul))
                }
                else {
                  res <- res + geom_ribbon(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                    filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, ymin = ci_lwr_new, 
                    ymax = ci_upr_new), alpha = 0.4)
                  res <- res + geom_ribbon(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                    filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, ymin = ci_lwr_cumul, 
                    ymax = ci_upr_cumul), alpha = 0.4)
                  res <- res + geom_line(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                    filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, y = pred_diff_new))
                  res <- res + geom_line(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                    filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, y = pred_diff_cumul))
                }
                summ_lm_new <- summary(mod_new)
                summ_lm_cumul <- summary(mod_cumul)
                ci_slope_new <- c(summ_lm_new$coefficients[2, 
                  1] - qnorm(0.975) * summ_lm_new$coefficients[2, 
                  2], summ_lm_new$coefficients[2, 1] + qnorm(0.975) * 
                  summ_lm_new$coefficients[2, 2])
                print(paste0("Estimated slope and its 95% confidence interval (new): ", 
                  format(round(summ_lm_new$coefficients[2, 1], 
                    3), nsmall = 3), " (", format(round(ci_slope_new[1], 
                    3), nsmall = 3), ",", format(round(ci_slope_new[2], 
                    3), nsmall = 3), ")"))
                print(paste0("Half-life in days and its 95% confidence interval (new): ", 
                  format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
                    1], 3), nsmall = 3), " (", format(round((-1) * 
                    log(2)/ci_slope_new[1], 3), nsmall = 3), 
                  ",", format((-1) * round(log(2)/ci_slope_new[2], 
                    3), nsmall = 3), ")"))
                ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 
                  1] - qnorm(0.975) * summ_lm_cumul$coefficients[2, 
                  2], summ_lm_cumul$coefficients[2, 1] + qnorm(0.975) * 
                  summ_lm_cumul$coefficients[2, 2])
                print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
                  format(round(summ_lm_cumul$coefficients[2, 
                    1], 3), nsmall = 3), " (", format(round(ci_slope_cumul[1], 
                    3), nsmall = 3), ",", format(round(ci_slope_cumul[2], 
                    3), nsmall = 3), ")"))
                print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
                  format(round(log(2)/summ_lm_cumul$coefficients[2, 
                    1], 3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
                    3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
                    3), nsmall = 3), ")"))
            }
            else {
                print(c(NA, NA))
            }
            print("=======================================")
            sink()
        }
    }
}
debug at #22: res <- res + geom_line(aes(x = date, y = confirmed_new_gr, color = "(IT) Confirmed")) + 
    geom_line(aes(x = date, y = tests_new_gr, color = "(IT) Tests"))
debug at #24: if (b_dolog) {
    res <- res + geom_line(aes(x = date, y = diff_confirmed_new, 
        color = "(IT) Confirmed - Tests"))
    res <- res + geom_line(aes(x = date, y = diff_confirmed_cumul, 
        color = "(IT) Confirmed - Tests cumulative"))
    if (b_do_lm_numtest) {
        c_reg <- key[["administrative_area_level_2"]]
        if (is.na(c_reg)) {
            c_reg <- "Italy"
        }
        dfdata_cutoff <- read.csv("NumTest_dates.csv", header = TRUE, 
            sep = ";")
        i_reg <- which(dfdata_cutoff$region == c_reg)
        sink("LM_difflogcofirmestested_slopeontime.txt", append = TRUE)
        print(c_reg)
        if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
            data_for_lm <- data
            if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
                data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
                  dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
                  dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
            }
            data_for_lm <- data_for_lm[which(data_for_lm$date >= 
                dfdata_cutoff[i_reg, "date_cutoff"]), ]
            if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                data_for_lm <- data_for_lm[which(data_for_lm$date <= 
                  dfdata_cutoff[i_reg, "end_date"]), ]
            }
            data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
                is.nan(data_for_lm$diff_confirmed_new)))] <- NA
            data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
                is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
            data_for_lm$t <- 1:nrow(data_for_lm)
            mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
                na.action = "na.exclude")
            ci_new <- predict(mod_new, newdata = data_for_lm, 
                interval = "prediction")
            mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
                na.action = "na.exclude")
            ci_cumul <- predict(mod_new, newdata = data_for_lm, 
                interval = "prediction")
            data$ci_lwr_new <- NA
            data$ci_upr_new <- NA
            data$pred_diff_new <- NA
            data$ci_lwr_cumul <- NA
            data$ci_upr_cumul <- NA
            data$pred_diff_cumul <- NA
            v_dates_for_lm_indices <- which(data$date >= dfdata_cutoff[i_reg, 
                "date_cutoff"])
            if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
                  which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                    "end_date"]))
            }
            data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 
                1]
            data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 
                2]
            data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 
                3]
            data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                1]
            data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                2]
            data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                3]
            if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
                res <- res + geom_ribbon(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                  aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
                  alpha = 0.4)
                res <- res + geom_line(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                  aes(x = date, y = pred_diff_cumul))
            }
            else {
                res <- res + geom_ribbon(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                  filter(date <= as.Date(dfdata_cutoff[i_reg, 
                    "end_date"])), aes(x = date, ymin = ci_lwr_new, 
                  ymax = ci_upr_new), alpha = 0.4)
                res <- res + geom_ribbon(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                  filter(date <= as.Date(dfdata_cutoff[i_reg, 
                    "end_date"])), aes(x = date, ymin = ci_lwr_cumul, 
                  ymax = ci_upr_cumul), alpha = 0.4)
                res <- res + geom_line(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                  filter(date <= as.Date(dfdata_cutoff[i_reg, 
                    "end_date"])), aes(x = date, y = pred_diff_new))
                res <- res + geom_line(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                  filter(date <= as.Date(dfdata_cutoff[i_reg, 
                    "end_date"])), aes(x = date, y = pred_diff_cumul))
            }
            summ_lm_new <- summary(mod_new)
            summ_lm_cumul <- summary(mod_cumul)
            ci_slope_new <- c(summ_lm_new$coefficients[2, 1] - 
                qnorm(0.975) * summ_lm_new$coefficients[2, 2], 
                summ_lm_new$coefficients[2, 1] + qnorm(0.975) * 
                  summ_lm_new$coefficients[2, 2])
            print(paste0("Estimated slope and its 95% confidence interval (new): ", 
                format(round(summ_lm_new$coefficients[2, 1], 
                  3), nsmall = 3), " (", format(round(ci_slope_new[1], 
                  3), nsmall = 3), ",", format(round(ci_slope_new[2], 
                  3), nsmall = 3), ")"))
            print(paste0("Half-life in days and its 95% confidence interval (new): ", 
                format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
                  1], 3), nsmall = 3), " (", format(round((-1) * 
                  log(2)/ci_slope_new[1], 3), nsmall = 3), ",", 
                format((-1) * round(log(2)/ci_slope_new[2], 3), 
                  nsmall = 3), ")"))
            ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 
                1] - qnorm(0.975) * summ_lm_cumul$coefficients[2, 
                2], summ_lm_cumul$coefficients[2, 1] + qnorm(0.975) * 
                summ_lm_cumul$coefficients[2, 2])
            print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
                format(round(summ_lm_cumul$coefficients[2, 1], 
                  3), nsmall = 3), " (", format(round(ci_slope_cumul[1], 
                  3), nsmall = 3), ",", format(round(ci_slope_cumul[2], 
                  3), nsmall = 3), ")"))
            print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
                format(round(log(2)/summ_lm_cumul$coefficients[2, 
                  1], 3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
                  3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
                  3), nsmall = 3), ")"))
        }
        else {
            print(c(NA, NA))
        }
        print("=======================================")
        sink()
    }
}
debug at #25: res <- res + geom_line(aes(x = date, y = diff_confirmed_new, 
    color = "(IT) Confirmed - Tests"))
debug at #26: res <- res + geom_line(aes(x = date, y = diff_confirmed_cumul, 
    color = "(IT) Confirmed - Tests cumulative"))
debug at #27: if (b_do_lm_numtest) {
    c_reg <- key[["administrative_area_level_2"]]
    if (is.na(c_reg)) {
        c_reg <- "Italy"
    }
    dfdata_cutoff <- read.csv("NumTest_dates.csv", header = TRUE, 
        sep = ";")
    i_reg <- which(dfdata_cutoff$region == c_reg)
    sink("LM_difflogcofirmestested_slopeontime.txt", append = TRUE)
    print(c_reg)
    if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
        data_for_lm <- data
        if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
            data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
                dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
                dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
        }
        data_for_lm <- data_for_lm[which(data_for_lm$date >= 
            dfdata_cutoff[i_reg, "date_cutoff"]), ]
        if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
            data_for_lm <- data_for_lm[which(data_for_lm$date <= 
                dfdata_cutoff[i_reg, "end_date"]), ]
        }
        data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
            is.nan(data_for_lm$diff_confirmed_new)))] <- NA
        data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
            is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
        data_for_lm$t <- 1:nrow(data_for_lm)
        mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
            na.action = "na.exclude")
        ci_new <- predict(mod_new, newdata = data_for_lm, interval = "prediction")
        mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
            na.action = "na.exclude")
        ci_cumul <- predict(mod_new, newdata = data_for_lm, interval = "prediction")
        data$ci_lwr_new <- NA
        data$ci_upr_new <- NA
        data$pred_diff_new <- NA
        data$ci_lwr_cumul <- NA
        data$ci_upr_cumul <- NA
        data$pred_diff_cumul <- NA
        v_dates_for_lm_indices <- which(data$date >= dfdata_cutoff[i_reg, 
            "date_cutoff"])
        if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
            v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
                which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                  "end_date"]))
        }
        data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 
            1]
        data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 2]
        data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 3]
        data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
            1]
        data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
            2]
        data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
            3]
        if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
            res <- res + geom_ribbon(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
                alpha = 0.4)
            res <- res + geom_line(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                aes(x = date, y = pred_diff_cumul))
        }
        else {
            res <- res + geom_ribbon(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
                aes(x = date, ymin = ci_lwr_new, ymax = ci_upr_new), 
                alpha = 0.4)
            res <- res + geom_ribbon(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
                aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
                alpha = 0.4)
            res <- res + geom_line(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
                aes(x = date, y = pred_diff_new))
            res <- res + geom_line(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
                aes(x = date, y = pred_diff_cumul))
        }
        summ_lm_new <- summary(mod_new)
        summ_lm_cumul <- summary(mod_cumul)
        ci_slope_new <- c(summ_lm_new$coefficients[2, 1] - qnorm(0.975) * 
            summ_lm_new$coefficients[2, 2], summ_lm_new$coefficients[2, 
            1] + qnorm(0.975) * summ_lm_new$coefficients[2, 2])
        print(paste0("Estimated slope and its 95% confidence interval (new): ", 
            format(round(summ_lm_new$coefficients[2, 1], 3), 
                nsmall = 3), " (", format(round(ci_slope_new[1], 
                3), nsmall = 3), ",", format(round(ci_slope_new[2], 
                3), nsmall = 3), ")"))
        print(paste0("Half-life in days and its 95% confidence interval (new): ", 
            format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
                1], 3), nsmall = 3), " (", format(round((-1) * 
                log(2)/ci_slope_new[1], 3), nsmall = 3), ",", 
            format((-1) * round(log(2)/ci_slope_new[2], 3), nsmall = 3), 
            ")"))
        ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 1] - 
            qnorm(0.975) * summ_lm_cumul$coefficients[2, 2], 
            summ_lm_cumul$coefficients[2, 1] + qnorm(0.975) * 
                summ_lm_cumul$coefficients[2, 2])
        print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
            format(round(summ_lm_cumul$coefficients[2, 1], 3), 
                nsmall = 3), " (", format(round(ci_slope_cumul[1], 
                3), nsmall = 3), ",", format(round(ci_slope_cumul[2], 
                3), nsmall = 3), ")"))
        print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
            format(round(log(2)/summ_lm_cumul$coefficients[2, 
                1], 3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
                3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
                3), nsmall = 3), ")"))
    }
    else {
        print(c(NA, NA))
    }
    print("=======================================")
    sink()
}
debug at #28: c_reg <- key[["administrative_area_level_2"]]
debug at #29: if (is.na(c_reg)) {
    c_reg <- "Italy"
}
debug at #30: dfdata_cutoff <- read.csv("NumTest_dates.csv", header = TRUE, 
    sep = ";")
debug at #31: i_reg <- which(dfdata_cutoff$region == c_reg)
debug at #32: sink("LM_difflogcofirmestested_slopeontime.txt", append = TRUE)
debug at #33: print(c_reg)
[1] "Abruzzo"
debug at #34: if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
    data_for_lm <- data
    if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
        data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
            dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
            dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
    }
    data_for_lm <- data_for_lm[which(data_for_lm$date >= dfdata_cutoff[i_reg, 
        "date_cutoff"]), ]
    if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
        data_for_lm <- data_for_lm[which(data_for_lm$date <= 
            dfdata_cutoff[i_reg, "end_date"]), ]
    }
    data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
        is.nan(data_for_lm$diff_confirmed_new)))] <- NA
    data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
        is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
    data_for_lm$t <- 1:nrow(data_for_lm)
    mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
        na.action = "na.exclude")
    ci_new <- predict(mod_new, newdata = data_for_lm, interval = "prediction")
    mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
        na.action = "na.exclude")
    ci_cumul <- predict(mod_new, newdata = data_for_lm, interval = "prediction")
    data$ci_lwr_new <- NA
    data$ci_upr_new <- NA
    data$pred_diff_new <- NA
    data$ci_lwr_cumul <- NA
    data$ci_upr_cumul <- NA
    data$pred_diff_cumul <- NA
    v_dates_for_lm_indices <- which(data$date >= dfdata_cutoff[i_reg, 
        "date_cutoff"])
    if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
        v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
            which(data_for_lm$date <= dfdata_cutoff[i_reg, "end_date"]))
    }
    data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 1]
    data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 2]
    data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 3]
    data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
        1]
    data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 2]
    data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 3]
    if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
        res <- res + geom_ribbon(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), aes(x = date, 
            ymin = ci_lwr_cumul, ymax = ci_upr_cumul), alpha = 0.4)
        res <- res + geom_line(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), aes(x = date, 
            y = pred_diff_cumul))
    }
    else {
        res <- res + geom_ribbon(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, ymin = ci_lwr_new, ymax = ci_upr_new), 
            alpha = 0.4)
        res <- res + geom_ribbon(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
            alpha = 0.4)
        res <- res + geom_line(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, y = pred_diff_new))
        res <- res + geom_line(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, y = pred_diff_cumul))
    }
    summ_lm_new <- summary(mod_new)
    summ_lm_cumul <- summary(mod_cumul)
    ci_slope_new <- c(summ_lm_new$coefficients[2, 1] - qnorm(0.975) * 
        summ_lm_new$coefficients[2, 2], summ_lm_new$coefficients[2, 
        1] + qnorm(0.975) * summ_lm_new$coefficients[2, 2])
    print(paste0("Estimated slope and its 95% confidence interval (new): ", 
        format(round(summ_lm_new$coefficients[2, 1], 3), nsmall = 3), 
        " (", format(round(ci_slope_new[1], 3), nsmall = 3), 
        ",", format(round(ci_slope_new[2], 3), nsmall = 3), ")"))
    print(paste0("Half-life in days and its 95% confidence interval (new): ", 
        format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
            1], 3), nsmall = 3), " (", format(round((-1) * log(2)/ci_slope_new[1], 
            3), nsmall = 3), ",", format((-1) * round(log(2)/ci_slope_new[2], 
            3), nsmall = 3), ")"))
    ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 1] - qnorm(0.975) * 
        summ_lm_cumul$coefficients[2, 2], summ_lm_cumul$coefficients[2, 
        1] + qnorm(0.975) * summ_lm_cumul$coefficients[2, 2])
    print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
        format(round(summ_lm_cumul$coefficients[2, 1], 3), nsmall = 3), 
        " (", format(round(ci_slope_cumul[1], 3), nsmall = 3), 
        ",", format(round(ci_slope_cumul[2], 3), nsmall = 3), 
        ")"))
    print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
        format(round(log(2)/summ_lm_cumul$coefficients[2, 1], 
            3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
            3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
            3), nsmall = 3), ")"))
} else {
    print(c(NA, NA))
}
debug at #35: data_for_lm <- data
debug at #36: if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
    data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
        dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
        dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
}
debug at #37: data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
    dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
    dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
debugging in: (function(data, key, b_dodaily, b_donumtest, b_dolog,b_onlycumul,b_do_lm_numtest){
    res<-ggplot(data = data) 
    vMSE<-c()
    if (! b_donumtest){
\tres<-res+geom_line(aes(x = date, y = confirmed_scaled, color = '(IT) Confirmed/Tests')) 
\tvMSE<-c(vMSE,confirmed_scaled_all=sqrt(mean((data$confirmed_scaled-dp$confirmed_scaled[1:nrow(data)])^2,na.rm=TRUE)))
\tvMSE<-c(vMSE,confirmed_scaled_dp=sqrt(mean((data$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))]-dp$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))])^2,na.rm=TRUE)))
\t    if ((!b_onlycumul)&&!(b_scale_2020deaths)){
\t\tres<-res+geom_line(aes(x = date, y = deaths_scaled, color = "(IT) Deaths Scaled"))
\t\tvMSE<-c(vMSE,deaths_scaled=sqrt(mean((data$deaths_scaled-dp$confirmed_scaled[1:nrow(data)])^2,na.rm=TRUE)))
\t    \tvMSE<-c(vMSE,deaths_scaled_dp=sqrt(mean((data$deaths_scaled[1:min(nrow(data),length(dp$confirmed_scaled))]-dp$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))])^2,na.rm=TRUE)))
\t    }
\t    if (b_dodaily){
\t\tres<-res+geom_line(aes(x = date, y = confirmed_new_scaled, color = '(IT) Daily Confirmed/Tests'))
\t\tvMSE<-c(vMSE,confirmed_new_scaled=sqrt(mean((data$confirmed_new_scaled-dp$confirmed_scaled[1:nrow(data)])^2,na.rm=TRUE)))
\t    \tvMSE<-c(vMSE,confirmed_new_scaled_dp=sqrt(mean((data$confirmed_new_scaled[1:min(nrow(data),length(dp$confirmed_scaled))]-dp$confirmed_scaled[1:min(nrow(data),length(dp$confirmed_scaled))])^2,na.rm=TRUE)))
\t    }
\txdp <- dp[1:nrow(data),]
\txdp$date <- data$date[1:nrow(data)]
\tres<-res+geom_line(data = xdp, size = 2, aes(x = date, y = confirmed_scaled, color = '(DP) Confirmed Scaled')) 
    }else{
    \t    res<-res+geom_line(aes(x = date, y = confirmed_new_gr, color = "(IT) Confirmed")) +
\t\tgeom_line(aes(x = date, y = tests_new_gr, color = '(IT) Tests')) 
\t    if (b_dolog){
\t\tres<-res+geom_line(aes(x = date, y = diff_confirmed_new, color = '(IT) Confirmed - Tests'))
\t\tres<-res+geom_line(aes(x = date, y = diff_confirmed_cumul, color = '(IT) Confirmed - Tests cumulative'))
\t\tif (b_do_lm_numtest){
\t\t    c_reg<-key[['administrative_area_level_2']]
\t\t    if (is.na(c_reg)){c_reg<-"Italy"}
\t\t    dfdata_cutoff<-read.csv("NumTest_dates.csv",header=TRUE,sep=";")
\t\t    i_reg<-which(dfdata_cutoff$region==c_reg)
\t\t    sink("LM_difflogcofirmestested_slopeontime.txt",append=TRUE)
\t\t    print(c_reg)
\t\t    if (!is.na(dfdata_cutoff[i_reg,"date_cutoff"])){
\t\t\tdata_for_lm<-data
\t\t\tif (!is.na(dfdata_cutoff[i_reg,"remove_datefrom"])){
\t\t\t    data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date>=dfdata_cutoff[i_reg,"remove_datefrom"]),which(data_for_lm$date<=dfdata_cutoff[i_reg,"remove_dateto"]))]<-NA
\t\t\t    ##data_for_lm$diff_confirmed_cumul[intersect(which(data_for_lm$date>=dfdata_cutoff[i_reg,"remove_datefrom"]),which(data_for_lm$date<=dfdata_cutoff[i_reg,"remove_dateto"]))]<-NA
\t\t\t}
\t\t\tdata_for_lm<-data_for_lm[which(data_for_lm$date>=dfdata_cutoff[i_reg,"date_cutoff"]),]
\t\t\tif (!is.na(dfdata_cutoff[i_reg,"end_date"])){
\t\t\t    data_for_lm<-data_for_lm[which(data_for_lm$date<=dfdata_cutoff[i_reg,"end_date"]),]
\t\t\t}
\t\t\tdata_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new),is.nan(data_for_lm$diff_confirmed_new)))]<-NA
\t\t\tdata_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul),is.nan(data_for_lm$diff_confirmed_cumul)))]<-NA
\t\t\tdata_for_lm$t <- 1:nrow(data_for_lm)
\t\t\tmod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm,na.action="na.exclude")
\t\t\tci_new <- predict(mod_new, newdata = data_for_lm, interval = 'prediction')
\t\t\tmod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm,na.action="na.exclude")
\t\t\tci_cumul <- predict(mod_new, newdata = data_for_lm, interval = 'prediction')
\t\t\tdata$ci_lwr_new<-NA
\t\t\tdata$ci_upr_new<-NA\t\t\t
\t\t\tdata$pred_diff_new<-NA\t\t\t
\t\t\tdata$ci_lwr_cumul<-NA
\t\t\tdata$ci_upr_cumul<-NA\t\t\t
\t\t\tdata$pred_diff_cumul<-NA\t\t\t
\t\t\tv_dates_for_lm_indices<-which(data$date>=dfdata_cutoff[i_reg,"date_cutoff"])
\t\t\tif (!is.na(dfdata_cutoff[i_reg,"end_date"])){
\t\t\t    v_dates_for_lm_indices<-intersect(v_dates_for_lm_indices,which(data_for_lm$date<=dfdata_cutoff[i_reg,"end_date"]))
\t\t\t}
\t\t\tdata$pred_diff_new[v_dates_for_lm_indices]<-ci_new[,1]
\t\t\tdata$ci_lwr_new[v_dates_for_lm_indices]<-ci_new[,2]
\t\t\tdata$ci_upr_new[v_dates_for_lm_indices]<-ci_new[,3]
\t\t\tdata$pred_diff_cumul[v_dates_for_lm_indices]<-ci_cumul[,1]
\t\t\tdata$ci_lwr_cumul[v_dates_for_lm_indices]<-ci_cumul[,2]
\t\t\tdata$ci_upr_cumul[v_dates_for_lm_indices]<-ci_cumul[,3]

\t\t\t#res<-res+  geom_line(aes(y = ci[,1],)) +   geom_ribbon(aes(ymin = ci[,2], ymax = ci[,3]), alpha = 0.4) 
\t\t\t#res<-res+   geom_ribbon(aes(x=date,ymin = data$ci_lwr, ymax = data$ci_upr), alpha = 0.4) 
\t\t\tif (is.na(dfdata_cutoff[i_reg,"end_date"])){
\t\t\t    #res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])), aes(x=date,ymin = ci_lwr_new, ymax = ci_upr_new), alpha = 0.4) 
\t\t\t    res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])), aes(x=date,ymin = ci_lwr_cumul, ymax = ci_upr_cumul), alpha = 0.4) 
\t\t\t    
\t\t\t    #res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])),aes(x=date,y = pred_diff_new))
\t\t\t    res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])),aes(x=date,y = pred_diff_cumul))
\t\t\t}else{
\t\t\t    res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])), aes(x=date,ymin = ci_lwr_new, ymax = ci_upr_new), alpha = 0.4) 
\t\t\t    res<-res+   geom_ribbon(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])), aes(x=date,ymin = ci_lwr_cumul, ymax = ci_upr_cumul), alpha = 0.4) 
\t\t\t    
\t\t\t    res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])),aes(x=date,y = pred_diff_new))
\t\t\t    res<-res+ geom_line(data = data %>% filter(date >= as.Date(dfdata_cutoff[i_reg,"date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg,"end_date"])),aes(x=date,y = pred_diff_cumul))
\t\t\t}
\t\t\tsumm_lm_new<-summary(mod_new)
\t\t\tsumm_lm_cumul<-summary(mod_cumul)
\t\t\tci_slope_new<-c(summ_lm_new$coefficients[2,1]-qnorm(0.975)*summ_lm_new$coefficients[2,2],summ_lm_new$coefficients[2,1]+qnorm(0.975)*summ_lm_new$coefficients[2,2])
\t\t\tprint(paste0("Estimated slope and its 95% confidence interval (new): ",format(round(summ_lm_new$coefficients[2,1], 3), nsmall = 3)," (",format(round(ci_slope_new[1], 3), nsmall = 3),",",format(round(ci_slope_new[2], 3), nsmall = 3),")"))
\t\t\tprint(paste0("Half-life in days and its 95% confidence interval (new): ",format(round((-1)*log(2)/summ_lm_new$coefficients[2,1], 3), nsmall = 3)," (",format(round((-1)*log(2)/ci_slope_new[1], 3), nsmall = 3),",",format((-1)*round(log(2)/ci_slope_new[2], 3), nsmall = 3),")"))

\t\t\tci_slope_cumul<-c(summ_lm_cumul$coefficients[2,1]-qnorm(0.975)*summ_lm_cumul$coefficients[2,2],summ_lm_cumul$coefficients[2,1]+qnorm(0.975)*summ_lm_cumul$coefficients[2,2])
\t\t\tprint(paste0("Estimated slope and its 95% confidence interval (cumulative): ",format(round(summ_lm_cumul$coefficients[2,1], 3), nsmall = 3)," (",format(round(ci_slope_cumul[1], 3), nsmall = 3),",",format(round(ci_slope_cumul[2], 3), nsmall = 3),")"))
\t\t\tprint(paste0("Doubling time in days and its 95% confidence interval (cumulative): ",format(round(log(2)/summ_lm_cumul$coefficients[2,1], 3), nsmall = 3)," (",format(round(log(2)/ci_slope_cumul[2], 3), nsmall = 3),",",format(round(log(2)/ci_slope_cumul[1], 3), nsmall = 3),")"))
\t\t    }else{
\t\t\tprint(c(NA,NA))
\t\t    }
\t\t    print("=======================================")
\t\t    sink()
\t\t}
\t    }
    }    
    if (b_scale_2020deaths){
        if (b_plot_COVIDexcessfrac){
            res<-res+geom_line(aes(x = date, y = excess_death_frac, color = "(IT) COVID frac excess deaths")) \t
    \t}
        res<-res+geom_line(aes(x = date, y = weekly_death_frac, color = "(IT) COVID frac weekly deaths")) \t
        res<-res+geom_line(aes(x = date, y = weekly_death_frac_pastavg, color = "(IT) COVID frac weekly deaths wrt past")) \t
        res<-res+geom_line(aes(x = date, y = cumul_death_frac, color = "(IT) COVID frac cumul deaths")) \t
        res<-res+geom_line(aes(x = date, y = cumul_death_frac_pastavg, color = "(IT) COVID frac cumul deaths wrt past")) \t
        res<-res+geom_line(aes(x = date, y = death_2020_ratio, color = "(IT) deaths in 2020 wrt past")) \t
    }
    title <- ifelse(is.na(key$administrative_area_level_2), key$administrative_area_level_1, key$administrative_area_level_2)
    if(b_dolog) title <- paste(title,"(log)")
    res <- res + ggtitle(title) + ylab("") + xlab("") + theme(legend.title = element_blank())
    res
    list(grplot=res,MSE=vMSE, title = title)
})(dots[[1L]][[1L]], dots[[2L]][[1L]], FALSE, TRUE, TRUE, FALSE, 
    TRUE)
debug at #1: {
    res <- ggplot(data = data)
    vMSE <- c()
    if (!b_donumtest) {
        res <- res + geom_line(aes(x = date, y = confirmed_scaled, 
            color = "(IT) Confirmed/Tests"))
        vMSE <- c(vMSE, confirmed_scaled_all = sqrt(mean((data$confirmed_scaled - 
            dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
        vMSE <- c(vMSE, confirmed_scaled_dp = sqrt(mean((data$confirmed_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
        if ((!b_onlycumul) && !(b_scale_2020deaths)) {
            res <- res + geom_line(aes(x = date, y = deaths_scaled, 
                color = "(IT) Deaths Scaled"))
            vMSE <- c(vMSE, deaths_scaled = sqrt(mean((data$deaths_scaled - 
                dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
            vMSE <- c(vMSE, deaths_scaled_dp = sqrt(mean((data$deaths_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
        }
        if (b_dodaily) {
            res <- res + geom_line(aes(x = date, y = confirmed_new_scaled, 
                color = "(IT) Daily Confirmed/Tests"))
            vMSE <- c(vMSE, confirmed_new_scaled = sqrt(mean((data$confirmed_new_scaled - 
                dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
            vMSE <- c(vMSE, confirmed_new_scaled_dp = sqrt(mean((data$confirmed_new_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
                length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
        }
        xdp <- dp[1:nrow(data), ]
        xdp$date <- data$date[1:nrow(data)]
        res <- res + geom_line(data = xdp, size = 2, aes(x = date, 
            y = confirmed_scaled, color = "(DP) Confirmed Scaled"))
    }
    else {
        res <- res + geom_line(aes(x = date, y = confirmed_new_gr, 
            color = "(IT) Confirmed")) + geom_line(aes(x = date, 
            y = tests_new_gr, color = "(IT) Tests"))
        if (b_dolog) {
            res <- res + geom_line(aes(x = date, y = diff_confirmed_new, 
                color = "(IT) Confirmed - Tests"))
            res <- res + geom_line(aes(x = date, y = diff_confirmed_cumul, 
                color = "(IT) Confirmed - Tests cumulative"))
            if (b_do_lm_numtest) {
                c_reg <- key[["administrative_area_level_2"]]
                if (is.na(c_reg)) {
                  c_reg <- "Italy"
                }
                dfdata_cutoff <- read.csv("NumTest_dates.csv", 
                  header = TRUE, sep = ";")
                i_reg <- which(dfdata_cutoff$region == c_reg)
                sink("LM_difflogcofirmestested_slopeontime.txt", 
                  append = TRUE)
                print(c_reg)
                if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
                  data_for_lm <- data
                  if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
                    data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
                      dfdata_cutoff[i_reg, "remove_datefrom"]), 
                      which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                        "remove_dateto"]))] <- NA
                  }
                  data_for_lm <- data_for_lm[which(data_for_lm$date >= 
                    dfdata_cutoff[i_reg, "date_cutoff"]), ]
                  if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                    data_for_lm <- data_for_lm[which(data_for_lm$date <= 
                      dfdata_cutoff[i_reg, "end_date"]), ]
                  }
                  data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
                    is.nan(data_for_lm$diff_confirmed_new)))] <- NA
                  data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
                    is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
                  data_for_lm$t <- 1:nrow(data_for_lm)
                  mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
                    na.action = "na.exclude")
                  ci_new <- predict(mod_new, newdata = data_for_lm, 
                    interval = "prediction")
                  mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
                    na.action = "na.exclude")
                  ci_cumul <- predict(mod_new, newdata = data_for_lm, 
                    interval = "prediction")
                  data$ci_lwr_new <- NA
                  data$ci_upr_new <- NA
                  data$pred_diff_new <- NA
                  data$ci_lwr_cumul <- NA
                  data$ci_upr_cumul <- NA
                  data$pred_diff_cumul <- NA
                  v_dates_for_lm_indices <- which(data$date >= 
                    dfdata_cutoff[i_reg, "date_cutoff"])
                  if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                    v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
                      which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                        "end_date"]))
                  }
                  data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 
                    1]
                  data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 
                    2]
                  data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 
                    3]
                  data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                    1]
                  data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                    2]
                  data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                    3]
                  if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
                    res <- res + geom_ribbon(data = data %>% 
                      filter(date >= as.Date(dfdata_cutoff[i_reg, 
                        "date_cutoff"])), aes(x = date, ymin = ci_lwr_cumul, 
                      ymax = ci_upr_cumul), alpha = 0.4)
                    res <- res + geom_line(data = data %>% filter(date >= 
                      as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                      aes(x = date, y = pred_diff_cumul))
                  }
                  else {
                    res <- res + geom_ribbon(data = data %>% 
                      filter(date >= as.Date(dfdata_cutoff[i_reg, 
                        "date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, ymin = ci_lwr_new, 
                      ymax = ci_upr_new), alpha = 0.4)
                    res <- res + geom_ribbon(data = data %>% 
                      filter(date >= as.Date(dfdata_cutoff[i_reg, 
                        "date_cutoff"])) %>% filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, ymin = ci_lwr_cumul, 
                      ymax = ci_upr_cumul), alpha = 0.4)
                    res <- res + geom_line(data = data %>% filter(date >= 
                      as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                      filter(date <= as.Date(dfdata_cutoff[i_reg, 
                        "end_date"])), aes(x = date, y = pred_diff_new))
                    res <- res + geom_line(data = data %>% filter(date >= 
                      as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                      filter(date <= as.Date(dfdata_cutoff[i_reg, 
                        "end_date"])), aes(x = date, y = pred_diff_cumul))
                  }
                  summ_lm_new <- summary(mod_new)
                  summ_lm_cumul <- summary(mod_cumul)
                  ci_slope_new <- c(summ_lm_new$coefficients[2, 
                    1] - qnorm(0.975) * summ_lm_new$coefficients[2, 
                    2], summ_lm_new$coefficients[2, 1] + qnorm(0.975) * 
                    summ_lm_new$coefficients[2, 2])
                  print(paste0("Estimated slope and its 95% confidence interval (new): ", 
                    format(round(summ_lm_new$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round(ci_slope_new[1], 
                      3), nsmall = 3), ",", format(round(ci_slope_new[2], 
                      3), nsmall = 3), ")"))
                  print(paste0("Half-life in days and its 95% confidence interval (new): ", 
                    format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round((-1) * 
                      log(2)/ci_slope_new[1], 3), nsmall = 3), 
                    ",", format((-1) * round(log(2)/ci_slope_new[2], 
                      3), nsmall = 3), ")"))
                  ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 
                    1] - qnorm(0.975) * summ_lm_cumul$coefficients[2, 
                    2], summ_lm_cumul$coefficients[2, 1] + qnorm(0.975) * 
                    summ_lm_cumul$coefficients[2, 2])
                  print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
                    format(round(summ_lm_cumul$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round(ci_slope_cumul[1], 
                      3), nsmall = 3), ",", format(round(ci_slope_cumul[2], 
                      3), nsmall = 3), ")"))
                  print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
                    format(round(log(2)/summ_lm_cumul$coefficients[2, 
                      1], 3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
                      3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
                      3), nsmall = 3), ")"))
                }
                else {
                  print(c(NA, NA))
                }
                print("=======================================")
                sink()
            }
        }
    }
    if (b_scale_2020deaths) {
        if (b_plot_COVIDexcessfrac) {
            res <- res + geom_line(aes(x = date, y = excess_death_frac, 
                color = "(IT) COVID frac excess deaths"))
        }
        res <- res + geom_line(aes(x = date, y = weekly_death_frac, 
            color = "(IT) COVID frac weekly deaths"))
        res <- res + geom_line(aes(x = date, y = weekly_death_frac_pastavg, 
            color = "(IT) COVID frac weekly deaths wrt past"))
        res <- res + geom_line(aes(x = date, y = cumul_death_frac, 
            color = "(IT) COVID frac cumul deaths"))
        res <- res + geom_line(aes(x = date, y = cumul_death_frac_pastavg, 
            color = "(IT) COVID frac cumul deaths wrt past"))
        res <- res + geom_line(aes(x = date, y = death_2020_ratio, 
            color = "(IT) deaths in 2020 wrt past"))
    }
    title <- ifelse(is.na(key$administrative_area_level_2), key$administrative_area_level_1, 
        key$administrative_area_level_2)
    if (b_dolog) 
        title <- paste(title, "(log)")
    res <- res + ggtitle(title) + ylab("") + xlab("") + theme(legend.title = element_blank())
    res
    list(grplot = res, MSE = vMSE, title = title)
}
[1] TRUE
debug at #19: res <- res + geom_line(aes(x = date, y = confirmed_new_gr, color = "(IT) Confirmed")) + 
    geom_line(aes(x = date, y = tests_new_gr, color = "(IT) Tests"))
debug at #21: if (b_dolog) {
    res <- res + geom_line(aes(x = date, y = diff_confirmed_new, 
        color = "(IT) Confirmed - Tests"))
    res <- res + geom_line(aes(x = date, y = diff_confirmed_cumul, 
        color = "(IT) Confirmed - Tests cumulative"))
    if (b_do_lm_numtest) {
        c_reg <- key[["administrative_area_level_2"]]
        if (is.na(c_reg)) {
            c_reg <- "Italy"
        }
        dfdata_cutoff <- read.csv("NumTest_dates.csv", header = TRUE, 
            sep = ";")
        i_reg <- which(dfdata_cutoff$region == c_reg)
        sink("LM_difflogcofirmestested_slopeontime.txt", append = TRUE)
        print(c_reg)
        if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
            data_for_lm <- data
            if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
                data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
                  dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
                  dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
            }
            data_for_lm <- data_for_lm[which(data_for_lm$date >= 
                dfdata_cutoff[i_reg, "date_cutoff"]), ]
            if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                data_for_lm <- data_for_lm[which(data_for_lm$date <= 
                  dfdata_cutoff[i_reg, "end_date"]), ]
            }
            data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
                is.nan(data_for_lm$diff_confirmed_new)))] <- NA
            data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
                is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
            data_for_lm$t <- 1:nrow(data_for_lm)
            mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
                na.action = "na.exclude")
            ci_new <- predict(mod_new, newdata = data_for_lm, 
                interval = "prediction")
            mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
                na.action = "na.exclude")
            ci_cumul <- predict(mod_new, newdata = data_for_lm, 
                interval = "prediction")
            data$ci_lwr_new <- NA
            data$ci_upr_new <- NA
            data$pred_diff_new <- NA
            data$ci_lwr_cumul <- NA
            data$ci_upr_cumul <- NA
            data$pred_diff_cumul <- NA
            v_dates_for_lm_indices <- which(data$date >= dfdata_cutoff[i_reg, 
                "date_cutoff"])
            if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
                  which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                    "end_date"]))
            }
            data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 
                1]
            data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 
                2]
            data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 
                3]
            data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                1]
            data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                2]
            data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                3]
            if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
                res <- res + geom_ribbon(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                  aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
                  alpha = 0.4)
                res <- res + geom_line(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                  aes(x = date, y = pred_diff_cumul))
            }
            else {
                res <- res + geom_ribbon(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                  filter(date <= as.Date(dfdata_cutoff[i_reg, 
                    "end_date"])), aes(x = date, ymin = ci_lwr_new, 
                  ymax = ci_upr_new), alpha = 0.4)
                res <- res + geom_ribbon(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                  filter(date <= as.Date(dfdata_cutoff[i_reg, 
                    "end_date"])), aes(x = date, ymin = ci_lwr_cumul, 
                  ymax = ci_upr_cumul), alpha = 0.4)
                res <- res + geom_line(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                  filter(date <= as.Date(dfdata_cutoff[i_reg, 
                    "end_date"])), aes(x = date, y = pred_diff_new))
                res <- res + geom_line(data = data %>% filter(date >= 
                  as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                  filter(date <= as.Date(dfdata_cutoff[i_reg, 
                    "end_date"])), aes(x = date, y = pred_diff_cumul))
            }
            summ_lm_new <- summary(mod_new)
            summ_lm_cumul <- summary(mod_cumul)
            ci_slope_new <- c(summ_lm_new$coefficients[2, 1] - 
                qnorm(0.975) * summ_lm_new$coefficients[2, 2], 
                summ_lm_new$coefficients[2, 1] + qnorm(0.975) * 
                  summ_lm_new$coefficients[2, 2])
            print(paste0("Estimated slope and its 95% confidence interval (new): ", 
                format(round(summ_lm_new$coefficients[2, 1], 
                  3), nsmall = 3), " (", format(round(ci_slope_new[1], 
                  3), nsmall = 3), ",", format(round(ci_slope_new[2], 
                  3), nsmall = 3), ")"))
            print(paste0("Half-life in days and its 95% confidence interval (new): ", 
                format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
                  1], 3), nsmall = 3), " (", format(round((-1) * 
                  log(2)/ci_slope_new[1], 3), nsmall = 3), ",", 
                format((-1) * round(log(2)/ci_slope_new[2], 3), 
                  nsmall = 3), ")"))
            ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 
                1] - qnorm(0.975) * summ_lm_cumul$coefficients[2, 
                2], summ_lm_cumul$coefficients[2, 1] + qnorm(0.975) * 
                summ_lm_cumul$coefficients[2, 2])
            print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
                format(round(summ_lm_cumul$coefficients[2, 1], 
                  3), nsmall = 3), " (", format(round(ci_slope_cumul[1], 
                  3), nsmall = 3), ",", format(round(ci_slope_cumul[2], 
                  3), nsmall = 3), ")"))
            print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
                format(round(log(2)/summ_lm_cumul$coefficients[2, 
                  1], 3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
                  3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
                  3), nsmall = 3), ")"))
        }
        else {
            print(c(NA, NA))
        }
        print("=======================================")
        sink()
    }
}
debug at #22: res <- res + geom_line(aes(x = date, y = diff_confirmed_new, 
    color = "(IT) Confirmed - Tests"))
debug at #23: res <- res + geom_line(aes(x = date, y = diff_confirmed_cumul, 
    color = "(IT) Confirmed - Tests cumulative"))
debug at #24: if (b_do_lm_numtest) {
    c_reg <- key[["administrative_area_level_2"]]
    if (is.na(c_reg)) {
        c_reg <- "Italy"
    }
    dfdata_cutoff <- read.csv("NumTest_dates.csv", header = TRUE, 
        sep = ";")
    i_reg <- which(dfdata_cutoff$region == c_reg)
    sink("LM_difflogcofirmestested_slopeontime.txt", append = TRUE)
    print(c_reg)
    if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
        data_for_lm <- data
        if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
            data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
                dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
                dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
        }
        data_for_lm <- data_for_lm[which(data_for_lm$date >= 
            dfdata_cutoff[i_reg, "date_cutoff"]), ]
        if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
            data_for_lm <- data_for_lm[which(data_for_lm$date <= 
                dfdata_cutoff[i_reg, "end_date"]), ]
        }
        data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
            is.nan(data_for_lm$diff_confirmed_new)))] <- NA
        data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
            is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
        data_for_lm$t <- 1:nrow(data_for_lm)
        mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
            na.action = "na.exclude")
        ci_new <- predict(mod_new, newdata = data_for_lm, interval = "prediction")
        mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
            na.action = "na.exclude")
        ci_cumul <- predict(mod_new, newdata = data_for_lm, interval = "prediction")
        data$ci_lwr_new <- NA
        data$ci_upr_new <- NA
        data$pred_diff_new <- NA
        data$ci_lwr_cumul <- NA
        data$ci_upr_cumul <- NA
        data$pred_diff_cumul <- NA
        v_dates_for_lm_indices <- which(data$date >= dfdata_cutoff[i_reg, 
            "date_cutoff"])
        if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
            v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
                which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                  "end_date"]))
        }
        data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 
            1]
        data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 2]
        data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 3]
        data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
            1]
        data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
            2]
        data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
            3]
        if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
            res <- res + geom_ribbon(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
                alpha = 0.4)
            res <- res + geom_line(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                aes(x = date, y = pred_diff_cumul))
        }
        else {
            res <- res + geom_ribbon(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
                aes(x = date, ymin = ci_lwr_new, ymax = ci_upr_new), 
                alpha = 0.4)
            res <- res + geom_ribbon(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
                aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
                alpha = 0.4)
            res <- res + geom_line(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
                aes(x = date, y = pred_diff_new))
            res <- res + geom_line(data = data %>% filter(date >= 
                as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
                aes(x = date, y = pred_diff_cumul))
        }
        summ_lm_new <- summary(mod_new)
        summ_lm_cumul <- summary(mod_cumul)
        ci_slope_new <- c(summ_lm_new$coefficients[2, 1] - qnorm(0.975) * 
            summ_lm_new$coefficients[2, 2], summ_lm_new$coefficients[2, 
            1] + qnorm(0.975) * summ_lm_new$coefficients[2, 2])
        print(paste0("Estimated slope and its 95% confidence interval (new): ", 
            format(round(summ_lm_new$coefficients[2, 1], 3), 
                nsmall = 3), " (", format(round(ci_slope_new[1], 
                3), nsmall = 3), ",", format(round(ci_slope_new[2], 
                3), nsmall = 3), ")"))
        print(paste0("Half-life in days and its 95% confidence interval (new): ", 
            format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
                1], 3), nsmall = 3), " (", format(round((-1) * 
                log(2)/ci_slope_new[1], 3), nsmall = 3), ",", 
            format((-1) * round(log(2)/ci_slope_new[2], 3), nsmall = 3), 
            ")"))
        ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 1] - 
            qnorm(0.975) * summ_lm_cumul$coefficients[2, 2], 
            summ_lm_cumul$coefficients[2, 1] + qnorm(0.975) * 
                summ_lm_cumul$coefficients[2, 2])
        print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
            format(round(summ_lm_cumul$coefficients[2, 1], 3), 
                nsmall = 3), " (", format(round(ci_slope_cumul[1], 
                3), nsmall = 3), ",", format(round(ci_slope_cumul[2], 
                3), nsmall = 3), ")"))
        print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
            format(round(log(2)/summ_lm_cumul$coefficients[2, 
                1], 3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
                3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
                3), nsmall = 3), ")"))
    }
    else {
        print(c(NA, NA))
    }
    print("=======================================")
    sink()
}
debug at #25: c_reg <- key[["administrative_area_level_2"]]
debug at #26: if (is.na(c_reg)) {
    c_reg <- "Italy"
}
debug at #27: dfdata_cutoff <- read.csv("NumTest_dates.csv", header = TRUE, 
    sep = ";")
debug at #28: i_reg <- which(dfdata_cutoff$region == c_reg)
debug at #29: sink("LM_difflogcofirmestested_slopeontime.txt", append = TRUE)
debug at #30: print(c_reg)
[1] "Abruzzo"
debug at #31: if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
    data_for_lm <- data
    if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
        data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
            dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
            dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
    }
    data_for_lm <- data_for_lm[which(data_for_lm$date >= dfdata_cutoff[i_reg, 
        "date_cutoff"]), ]
    if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
        data_for_lm <- data_for_lm[which(data_for_lm$date <= 
            dfdata_cutoff[i_reg, "end_date"]), ]
    }
    data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
        is.nan(data_for_lm$diff_confirmed_new)))] <- NA
    data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
        is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
    data_for_lm$t <- 1:nrow(data_for_lm)
    mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
        na.action = "na.exclude")
    ci_new <- predict(mod_new, newdata = data_for_lm, interval = "prediction")
    mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
        na.action = "na.exclude")
    ci_cumul <- predict(mod_new, newdata = data_for_lm, interval = "prediction")
    data$ci_lwr_new <- NA
    data$ci_upr_new <- NA
    data$pred_diff_new <- NA
    data$ci_lwr_cumul <- NA
    data$ci_upr_cumul <- NA
    data$pred_diff_cumul <- NA
    v_dates_for_lm_indices <- which(data$date >= dfdata_cutoff[i_reg, 
        "date_cutoff"])
    if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
        v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
            which(data_for_lm$date <= dfdata_cutoff[i_reg, "end_date"]))
    }
    data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 1]
    data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 2]
    data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 3]
    data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
        1]
    data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 2]
    data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 3]
    if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
        res <- res + geom_ribbon(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), aes(x = date, 
            ymin = ci_lwr_cumul, ymax = ci_upr_cumul), alpha = 0.4)
        res <- res + geom_line(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), aes(x = date, 
            y = pred_diff_cumul))
    }
    else {
        res <- res + geom_ribbon(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, ymin = ci_lwr_new, ymax = ci_upr_new), 
            alpha = 0.4)
        res <- res + geom_ribbon(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
            alpha = 0.4)
        res <- res + geom_line(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, y = pred_diff_new))
        res <- res + geom_line(data = data %>% filter(date >= 
            as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
            filter(date <= as.Date(dfdata_cutoff[i_reg, "end_date"])), 
            aes(x = date, y = pred_diff_cumul))
    }
    summ_lm_new <- summary(mod_new)
    summ_lm_cumul <- summary(mod_cumul)
    ci_slope_new <- c(summ_lm_new$coefficients[2, 1] - qnorm(0.975) * 
        summ_lm_new$coefficients[2, 2], summ_lm_new$coefficients[2, 
        1] + qnorm(0.975) * summ_lm_new$coefficients[2, 2])
    print(paste0("Estimated slope and its 95% confidence interval (new): ", 
        format(round(summ_lm_new$coefficients[2, 1], 3), nsmall = 3), 
        " (", format(round(ci_slope_new[1], 3), nsmall = 3), 
        ",", format(round(ci_slope_new[2], 3), nsmall = 3), ")"))
    print(paste0("Half-life in days and its 95% confidence interval (new): ", 
        format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
            1], 3), nsmall = 3), " (", format(round((-1) * log(2)/ci_slope_new[1], 
            3), nsmall = 3), ",", format((-1) * round(log(2)/ci_slope_new[2], 
            3), nsmall = 3), ")"))
    ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 1] - qnorm(0.975) * 
        summ_lm_cumul$coefficients[2, 2], summ_lm_cumul$coefficients[2, 
        1] + qnorm(0.975) * summ_lm_cumul$coefficients[2, 2])
    print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
        format(round(summ_lm_cumul$coefficients[2, 1], 3), nsmall = 3), 
        " (", format(round(ci_slope_cumul[1], 3), nsmall = 3), 
        ",", format(round(ci_slope_cumul[2], 3), nsmall = 3), 
        ")"))
    print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
        format(round(log(2)/summ_lm_cumul$coefficients[2, 1], 
            3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
            3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
            3), nsmall = 3), ")"))
} else {
    print(c(NA, NA))
}
debug at #32: data_for_lm <- data
debug at #33: if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
    data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
        dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
        dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
}
debug at #34: data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
    dfdata_cutoff[i_reg, "remove_datefrom"]), which(data_for_lm$date <= 
    dfdata_cutoff[i_reg, "remove_dateto"]))] <- NA
debug at #2: res <- ggplot(data = data)
debug at #3: vMSE <- c()
debug at #4: if (!b_donumtest) {
    res <- res + geom_line(aes(x = date, y = confirmed_scaled, 
        color = "(IT) Confirmed/Tests"))
    vMSE <- c(vMSE, confirmed_scaled_all = sqrt(mean((data$confirmed_scaled - 
        dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
    vMSE <- c(vMSE, confirmed_scaled_dp = sqrt(mean((data$confirmed_scaled[1:min(nrow(data), 
        length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
        length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
    if ((!b_onlycumul) && !(b_scale_2020deaths)) {
        res <- res + geom_line(aes(x = date, y = deaths_scaled, 
            color = "(IT) Deaths Scaled"))
        vMSE <- c(vMSE, deaths_scaled = sqrt(mean((data$deaths_scaled - 
            dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
        vMSE <- c(vMSE, deaths_scaled_dp = sqrt(mean((data$deaths_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
    }
    if (b_dodaily) {
        res <- res + geom_line(aes(x = date, y = confirmed_new_scaled, 
            color = "(IT) Daily Confirmed/Tests"))
        vMSE <- c(vMSE, confirmed_new_scaled = sqrt(mean((data$confirmed_new_scaled - 
            dp$confirmed_scaled[1:nrow(data)])^2, na.rm = TRUE)))
        vMSE <- c(vMSE, confirmed_new_scaled_dp = sqrt(mean((data$confirmed_new_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))] - dp$confirmed_scaled[1:min(nrow(data), 
            length(dp$confirmed_scaled))])^2, na.rm = TRUE)))
    }
    xdp <- dp[1:nrow(data), ]
    xdp$date <- data$date[1:nrow(data)]
    res <- res + geom_line(data = xdp, size = 2, aes(x = date, 
        y = confirmed_scaled, color = "(DP) Confirmed Scaled"))
} else {
    res <- res + geom_line(aes(x = date, y = confirmed_new_gr, 
        color = "(IT) Confirmed")) + geom_line(aes(x = date, 
        y = tests_new_gr, color = "(IT) Tests"))
    if (b_dolog) {
        res <- res + geom_line(aes(x = date, y = diff_confirmed_new, 
            color = "(IT) Confirmed - Tests"))
        res <- res + geom_line(aes(x = date, y = diff_confirmed_cumul, 
            color = "(IT) Confirmed - Tests cumulative"))
        if (b_do_lm_numtest) {
            c_reg <- key[["administrative_area_level_2"]]
            if (is.na(c_reg)) {
                c_reg <- "Italy"
            }
            dfdata_cutoff <- read.csv("NumTest_dates.csv", header = TRUE, 
                sep = ";")
            i_reg <- which(dfdata_cutoff$region == c_reg)
            sink("LM_difflogcofirmestested_slopeontime.txt", 
                append = TRUE)
            print(c_reg)
            if (!is.na(dfdata_cutoff[i_reg, "date_cutoff"])) {
                data_for_lm <- data
                if (!is.na(dfdata_cutoff[i_reg, "remove_datefrom"])) {
                  data_for_lm$diff_confirmed_new[intersect(which(data_for_lm$date >= 
                    dfdata_cutoff[i_reg, "remove_datefrom"]), 
                    which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                      "remove_dateto"]))] <- NA
                }
                data_for_lm <- data_for_lm[which(data_for_lm$date >= 
                  dfdata_cutoff[i_reg, "date_cutoff"]), ]
                if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                  data_for_lm <- data_for_lm[which(data_for_lm$date <= 
                    dfdata_cutoff[i_reg, "end_date"]), ]
                }
                data_for_lm$diff_confirmed_new[c(which(is.infinite(data_for_lm$diff_confirmed_new), 
                  is.nan(data_for_lm$diff_confirmed_new)))] <- NA
                data_for_lm$diff_confirmed_cumul[c(which(is.infinite(data_for_lm$diff_confirmed_cumul), 
                  is.nan(data_for_lm$diff_confirmed_cumul)))] <- NA
                data_for_lm$t <- 1:nrow(data_for_lm)
                mod_new <- lm(diff_confirmed_new ~ t, data = data_for_lm, 
                  na.action = "na.exclude")
                ci_new <- predict(mod_new, newdata = data_for_lm, 
                  interval = "prediction")
                mod_cumul <- lm(diff_confirmed_cumul ~ t, data = data_for_lm, 
                  na.action = "na.exclude")
                ci_cumul <- predict(mod_new, newdata = data_for_lm, 
                  interval = "prediction")
                data$ci_lwr_new <- NA
                data$ci_upr_new <- NA
                data$pred_diff_new <- NA
                data$ci_lwr_cumul <- NA
                data$ci_upr_cumul <- NA
                data$pred_diff_cumul <- NA
                v_dates_for_lm_indices <- which(data$date >= 
                  dfdata_cutoff[i_reg, "date_cutoff"])
                if (!is.na(dfdata_cutoff[i_reg, "end_date"])) {
                  v_dates_for_lm_indices <- intersect(v_dates_for_lm_indices, 
                    which(data_for_lm$date <= dfdata_cutoff[i_reg, 
                      "end_date"]))
                }
                data$pred_diff_new[v_dates_for_lm_indices] <- ci_new[, 
                  1]
                data$ci_lwr_new[v_dates_for_lm_indices] <- ci_new[, 
                  2]
                data$ci_upr_new[v_dates_for_lm_indices] <- ci_new[, 
                  3]
                data$pred_diff_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                  1]
                data$ci_lwr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                  2]
                data$ci_upr_cumul[v_dates_for_lm_indices] <- ci_cumul[, 
                  3]
                if (is.na(dfdata_cutoff[i_reg, "end_date"])) {
                  res <- res + geom_ribbon(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                    aes(x = date, ymin = ci_lwr_cumul, ymax = ci_upr_cumul), 
                    alpha = 0.4)
                  res <- res + geom_line(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])), 
                    aes(x = date, y = pred_diff_cumul))
                }
                else {
                  res <- res + geom_ribbon(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                    filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, ymin = ci_lwr_new, 
                    ymax = ci_upr_new), alpha = 0.4)
                  res <- res + geom_ribbon(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                    filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, ymin = ci_lwr_cumul, 
                    ymax = ci_upr_cumul), alpha = 0.4)
                  res <- res + geom_line(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                    filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, y = pred_diff_new))
                  res <- res + geom_line(data = data %>% filter(date >= 
                    as.Date(dfdata_cutoff[i_reg, "date_cutoff"])) %>% 
                    filter(date <= as.Date(dfdata_cutoff[i_reg, 
                      "end_date"])), aes(x = date, y = pred_diff_cumul))
                }
                summ_lm_new <- summary(mod_new)
                summ_lm_cumul <- summary(mod_cumul)
                ci_slope_new <- c(summ_lm_new$coefficients[2, 
                  1] - qnorm(0.975) * summ_lm_new$coefficients[2, 
                  2], summ_lm_new$coefficients[2, 1] + qnorm(0.975) * 
                  summ_lm_new$coefficients[2, 2])
                print(paste0("Estimated slope and its 95% confidence interval (new): ", 
                  format(round(summ_lm_new$coefficients[2, 1], 
                    3), nsmall = 3), " (", format(round(ci_slope_new[1], 
                    3), nsmall = 3), ",", format(round(ci_slope_new[2], 
                    3), nsmall = 3), ")"))
                print(paste0("Half-life in days and its 95% confidence interval (new): ", 
                  format(round((-1) * log(2)/summ_lm_new$coefficients[2, 
                    1], 3), nsmall = 3), " (", format(round((-1) * 
                    log(2)/ci_slope_new[1], 3), nsmall = 3), 
                  ",", format((-1) * round(log(2)/ci_slope_new[2], 
                    3), nsmall = 3), ")"))
                ci_slope_cumul <- c(summ_lm_cumul$coefficients[2, 
                  1] - qnorm(0.975) * summ_lm_cumul$coefficients[2, 
                  2], summ_lm_cumul$coefficients[2, 1] + qnorm(0.975) * 
                  summ_lm_cumul$coefficients[2, 2])
                print(paste0("Estimated slope and its 95% confidence interval (cumulative): ", 
                  format(round(summ_lm_cumul$coefficients[2, 
                    1], 3), nsmall = 3), " (", format(round(ci_slope_cumul[1], 
                    3), nsmall = 3), ",", format(round(ci_slope_cumul[2], 
                    3), nsmall = 3), ")"))
                print(paste0("Doubling time in days and its 95% confidence interval (cumulative): ", 
                  format(round(log(2)/summ_lm_cumul$coefficients[2, 
                    1], 3), nsmall = 3), " (", format(round(log(2)/ci_slope_cumul[2], 
                    3), nsmall = 3), ",", format(round(log(2)/ci_slope_cumul[1], 
                    3), nsmall = 3), ")"))
            }
            else {
                print(c(NA, NA))
            }
            print("=======================================")
            sink()
        }
    }
}
[1] "Abruzzo"
[1] "Estimated slope and its 95% confidence interval (new): -0.036 (-0.060,-0.011)"
[1] "Half-life in days and its 95% confidence interval (new): 19.390 (11.517,61.286)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.019,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -48.176 (-72.681,-36.028)"
[1] "======================================="
[1] "Basilicata"
[1] "Estimated slope and its 95% confidence interval (new): -0.115 (-0.145,-0.086)"
[1] "Half-life in days and its 95% confidence interval (new): 6.016 (4.791,8.083)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.036,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.686 (-22.450,-19.179)"
[1] "======================================="
[1] "Calabria"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.066,-0.032)"
[1] "Half-life in days and its 95% confidence interval (new): 14.114 (10.504,21.505)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.019,-0.016)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -38.861 (-42.413,-35.858)"
[1] "======================================="
[1] "Campania"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.085,-0.059)"
[1] "Half-life in days and its 95% confidence interval (new): 9.635 (8.128,11.827)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.028 (-0.029,-0.026)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -25.132 (-26.174,-24.170)"
[1] "======================================="
[1] "Emilia-Romagna"
[1] "Estimated slope and its 95% confidence interval (new): -0.043 (-0.051,-0.034)"
[1] "Half-life in days and its 95% confidence interval (new): 16.210 (13.492,20.300)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -57.251 (-66.425,-50.304)"
[1] "======================================="
[1] "Friuli Venezia Giulia"
[1] "Estimated slope and its 95% confidence interval (new): -0.054 (-0.078,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 12.838 (8.928,22.839)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.024 (-0.026,-0.022)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -28.984 (-31.062,-27.166)"
[1] "======================================="
[1] "Lazio"
[1] "======================================="
[1] "Liguria"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.052,-0.041)"
[1] "Half-life in days and its 95% confidence interval (new): 14.920 (13.242,17.085)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.013 (-0.016,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -54.456 (-70.434,-44.388)"
[1] "======================================="
[1] "Lombardia"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.057,-0.043)"
[1] "Half-life in days and its 95% confidence interval (new): 13.758 (12.060,16.014)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.009)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -60.096 (-76.630,-49.430)"
[1] "======================================="
[1] "Marche"
[1] "Estimated slope and its 95% confidence interval (new): -0.095 (-0.115,-0.075)"
[1] "Half-life in days and its 95% confidence interval (new): 7.297 (6.002,9.303)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.036 (-0.040,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -19.494 (-22.483,-17.207)"
[1] "======================================="
[1] "Molise"
[1] "======================================="
[1] "P.A. Bolzano"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.075,-0.026)"
[1] "Half-life in days and its 95% confidence interval (new): 13.775 (9.289,26.642)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.015 (-0.017,-0.014)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -45.294 (-50.205,-41.259)"
[1] "======================================="
[1] "P.A. Trento"
[1] "Estimated slope and its 95% confidence interval (new): -0.063 (-0.077,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 10.917 (8.987,13.901)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.029 (-0.030,-0.028)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -23.914 (-24.508,-23.348)"
[1] "======================================="
[1] "Piemonte"
[1] "Estimated slope and its 95% confidence interval (new): -0.039 (-0.047,-0.031)"
[1] "Half-life in days and its 95% confidence interval (new): 17.766 (14.769,22.289)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.011 (-0.015,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -62.185 (-91.724,-47.037)"
[1] "======================================="
[1] "Puglia"
[1] "Estimated slope and its 95% confidence interval (new): -0.055 (-0.066,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 12.562 (10.498,15.634)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.020,-0.017)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -37.830 (-41.640,-34.659)"
[1] "======================================="
[1] "Sardegna"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.094,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 9.656 (7.377,13.973)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.021 (-0.023,-0.019)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -32.901 (-36.851,-29.715)"
[1] "======================================="
[1] "Sicilia"
[1] "Estimated slope and its 95% confidence interval (new): -0.061 (-0.073,-0.048)"
[1] "Half-life in days and its 95% confidence interval (new): 11.430 (9.499,14.347)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.021,-0.011)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -43.841 (-65.505,-32.946)"
[1] "======================================="
[1] "Toscana"
[1] "Estimated slope and its 95% confidence interval (new): -0.040 (-0.050,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 17.430 (13.872,23.442)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.017,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -56.201 (-90.071,-40.843)"
[1] "======================================="
[1] "Umbria"
[1] "Estimated slope and its 95% confidence interval (new): -0.131 (-0.150,-0.112)"
[1] "Half-life in days and its 95% confidence interval (new): 5.292 (4.616,6.201)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.037,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.260 (-22.265,-18.587)"
[1] "======================================="
[1] "Valle d'Aosta"
[1] "======================================="
[1] "Veneto"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.055,-0.038)"
[1] "Half-life in days and its 95% confidence interval (new): 15.008 (12.710,18.321)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.015,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -49.682 (-53.827,-46.130)"
[1] "======================================="
[1] "Italy"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.054,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 14.104 (12.874,15.594)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.018,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -44.250 (-51.974,-38.525)"
[1] "======================================="
[1] "Abruzzo"
[1] "Estimated slope and its 95% confidence interval (new): -0.036 (-0.060,-0.011)"
[1] "Half-life in days and its 95% confidence interval (new): 19.390 (11.517,61.286)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.019,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -48.176 (-72.681,-36.028)"
[1] "======================================="
[1] "Basilicata"
[1] "Estimated slope and its 95% confidence interval (new): -0.115 (-0.145,-0.086)"
[1] "Half-life in days and its 95% confidence interval (new): 6.016 (4.791,8.083)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.036,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.686 (-22.450,-19.179)"
[1] "======================================="
[1] "Calabria"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.066,-0.032)"
[1] "Half-life in days and its 95% confidence interval (new): 14.114 (10.504,21.505)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.019,-0.016)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -38.861 (-42.413,-35.858)"
[1] "======================================="
[1] "Campania"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.085,-0.059)"
[1] "Half-life in days and its 95% confidence interval (new): 9.635 (8.128,11.827)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.028 (-0.029,-0.026)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -25.132 (-26.174,-24.170)"
[1] "======================================="
[1] "Emilia-Romagna"
[1] "Estimated slope and its 95% confidence interval (new): -0.043 (-0.051,-0.034)"
[1] "Half-life in days and its 95% confidence interval (new): 16.210 (13.492,20.300)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -57.251 (-66.425,-50.304)"
[1] "======================================="
[1] "Friuli Venezia Giulia"
[1] "Estimated slope and its 95% confidence interval (new): -0.054 (-0.078,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 12.838 (8.928,22.839)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.024 (-0.026,-0.022)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -28.984 (-31.062,-27.166)"
[1] "======================================="
[1] "Lazio"
[1] "======================================="
[1] "Liguria"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.052,-0.041)"
[1] "Half-life in days and its 95% confidence interval (new): 14.920 (13.242,17.085)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.013 (-0.016,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -54.456 (-70.434,-44.388)"
[1] "======================================="
[1] "Lombardia"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.057,-0.043)"
[1] "Half-life in days and its 95% confidence interval (new): 13.758 (12.060,16.014)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.009)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -60.096 (-76.630,-49.430)"
[1] "======================================="
[1] "Marche"
[1] "Estimated slope and its 95% confidence interval (new): -0.095 (-0.115,-0.075)"
[1] "Half-life in days and its 95% confidence interval (new): 7.297 (6.002,9.303)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.036 (-0.040,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -19.494 (-22.483,-17.207)"
[1] "======================================="
[1] "Molise"
[1] "======================================="
[1] "P.A. Bolzano"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.075,-0.026)"
[1] "Half-life in days and its 95% confidence interval (new): 13.775 (9.289,26.642)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.015 (-0.017,-0.014)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -45.294 (-50.205,-41.259)"
[1] "======================================="
[1] "P.A. Trento"
[1] "Estimated slope and its 95% confidence interval (new): -0.063 (-0.077,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 10.917 (8.987,13.901)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.029 (-0.030,-0.028)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -23.914 (-24.508,-23.348)"
[1] "======================================="
[1] "Piemonte"
[1] "Estimated slope and its 95% confidence interval (new): -0.039 (-0.047,-0.031)"
[1] "Half-life in days and its 95% confidence interval (new): 17.766 (14.769,22.289)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.011 (-0.015,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -62.185 (-91.724,-47.037)"
[1] "======================================="
[1] "Puglia"
[1] "Estimated slope and its 95% confidence interval (new): -0.055 (-0.066,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 12.562 (10.498,15.634)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.020,-0.017)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -37.830 (-41.640,-34.659)"
[1] "======================================="
[1] "Sardegna"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.094,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 9.656 (7.377,13.973)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.021 (-0.023,-0.019)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -32.901 (-36.851,-29.715)"
[1] "======================================="
[1] "Sicilia"
[1] "Estimated slope and its 95% confidence interval (new): -0.061 (-0.073,-0.048)"
[1] "Half-life in days and its 95% confidence interval (new): 11.430 (9.499,14.347)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.021,-0.011)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -43.841 (-65.505,-32.946)"
[1] "======================================="
[1] "Toscana"
[1] "Estimated slope and its 95% confidence interval (new): -0.040 (-0.050,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 17.430 (13.872,23.442)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.017,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -56.201 (-90.071,-40.843)"
[1] "======================================="
[1] "Umbria"
[1] "Estimated slope and its 95% confidence interval (new): -0.131 (-0.150,-0.112)"
[1] "Half-life in days and its 95% confidence interval (new): 5.292 (4.616,6.201)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.037,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.260 (-22.265,-18.587)"
[1] "======================================="
[1] "Valle d'Aosta"
[1] "======================================="
[1] "Veneto"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.055,-0.038)"
[1] "Half-life in days and its 95% confidence interval (new): 15.008 (12.710,18.321)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.015,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -49.682 (-53.827,-46.130)"
[1] "======================================="
[1] "Italy"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.054,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 14.104 (12.874,15.594)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.018,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -44.250 (-51.974,-38.525)"
[1] "======================================="
[1] "Abruzzo"
[1] "Estimated slope and its 95% confidence interval (new): -0.036 (-0.060,-0.011)"
[1] "Half-life in days and its 95% confidence interval (new): 19.390 (11.517,61.286)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.019,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -48.176 (-72.681,-36.028)"
[1] "======================================="
[1] "Basilicata"
[1] "Estimated slope and its 95% confidence interval (new): -0.115 (-0.145,-0.086)"
[1] "Half-life in days and its 95% confidence interval (new): 6.016 (4.791,8.083)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.036,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.686 (-22.450,-19.179)"
[1] "======================================="
[1] "Calabria"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.066,-0.032)"
[1] "Half-life in days and its 95% confidence interval (new): 14.114 (10.504,21.505)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.019,-0.016)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -38.861 (-42.413,-35.858)"
[1] "======================================="
[1] "Campania"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.085,-0.059)"
[1] "Half-life in days and its 95% confidence interval (new): 9.635 (8.128,11.827)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.028 (-0.029,-0.026)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -25.132 (-26.174,-24.170)"
[1] "======================================="
[1] "Emilia-Romagna"
[1] "Estimated slope and its 95% confidence interval (new): -0.043 (-0.051,-0.034)"
[1] "Half-life in days and its 95% confidence interval (new): 16.210 (13.492,20.300)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -57.251 (-66.425,-50.304)"
[1] "======================================="
[1] "Friuli Venezia Giulia"
[1] "Estimated slope and its 95% confidence interval (new): -0.054 (-0.078,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 12.838 (8.928,22.839)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.024 (-0.026,-0.022)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -28.984 (-31.062,-27.166)"
[1] "======================================="
[1] "Lazio"
[1] "======================================="
[1] "Liguria"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.052,-0.041)"
[1] "Half-life in days and its 95% confidence interval (new): 14.920 (13.242,17.085)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.013 (-0.016,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -54.456 (-70.434,-44.388)"
[1] "======================================="
[1] "Lombardia"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.057,-0.043)"
[1] "Half-life in days and its 95% confidence interval (new): 13.758 (12.060,16.014)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.009)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -60.096 (-76.630,-49.430)"
[1] "======================================="
[1] "Marche"
[1] "Estimated slope and its 95% confidence interval (new): -0.095 (-0.115,-0.075)"
[1] "Half-life in days and its 95% confidence interval (new): 7.297 (6.002,9.303)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.036 (-0.040,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -19.494 (-22.483,-17.207)"
[1] "======================================="
[1] "Molise"
[1] "======================================="
[1] "P.A. Bolzano"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.075,-0.026)"
[1] "Half-life in days and its 95% confidence interval (new): 13.775 (9.289,26.642)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.015 (-0.017,-0.014)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -45.294 (-50.205,-41.259)"
[1] "======================================="
[1] "P.A. Trento"
[1] "Estimated slope and its 95% confidence interval (new): -0.063 (-0.077,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 10.917 (8.987,13.901)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.029 (-0.030,-0.028)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -23.914 (-24.508,-23.348)"
[1] "======================================="
[1] "Piemonte"
[1] "Estimated slope and its 95% confidence interval (new): -0.039 (-0.047,-0.031)"
[1] "Half-life in days and its 95% confidence interval (new): 17.766 (14.769,22.289)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.011 (-0.015,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -62.185 (-91.724,-47.037)"
[1] "======================================="
[1] "Puglia"
[1] "Estimated slope and its 95% confidence interval (new): -0.055 (-0.066,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 12.562 (10.498,15.634)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.020,-0.017)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -37.830 (-41.640,-34.659)"
[1] "======================================="
[1] "Sardegna"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.094,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 9.656 (7.377,13.973)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.021 (-0.023,-0.019)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -32.901 (-36.851,-29.715)"
[1] "======================================="
[1] "Sicilia"
[1] "Estimated slope and its 95% confidence interval (new): -0.061 (-0.073,-0.048)"
[1] "Half-life in days and its 95% confidence interval (new): 11.430 (9.499,14.347)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.021,-0.011)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -43.841 (-65.505,-32.946)"
[1] "======================================="
[1] "Toscana"
[1] "Estimated slope and its 95% confidence interval (new): -0.040 (-0.050,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 17.430 (13.872,23.442)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.017,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -56.201 (-90.071,-40.843)"
[1] "======================================="
[1] "Umbria"
[1] "Estimated slope and its 95% confidence interval (new): -0.131 (-0.150,-0.112)"
[1] "Half-life in days and its 95% confidence interval (new): 5.292 (4.616,6.201)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.037,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.260 (-22.265,-18.587)"
[1] "======================================="
[1] "Valle d'Aosta"
[1] "======================================="
[1] "Veneto"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.055,-0.038)"
[1] "Half-life in days and its 95% confidence interval (new): 15.008 (12.710,18.321)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.015,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -49.682 (-53.827,-46.130)"
[1] "======================================="
[1] "Italy"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.054,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 14.104 (12.874,15.594)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.018,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -44.250 (-51.974,-38.525)"
[1] "======================================="
[1] "Abruzzo"
[1] "Estimated slope and its 95% confidence interval (new): -0.036 (-0.060,-0.011)"
[1] "Half-life in days and its 95% confidence interval (new): 19.390 (11.517,61.286)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.019,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -48.176 (-72.681,-36.028)"
[1] "======================================="
[1] "Basilicata"
[1] "Estimated slope and its 95% confidence interval (new): -0.115 (-0.145,-0.086)"
[1] "Half-life in days and its 95% confidence interval (new): 6.016 (4.791,8.083)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.036,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.686 (-22.450,-19.179)"
[1] "======================================="
[1] "Calabria"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.066,-0.032)"
[1] "Half-life in days and its 95% confidence interval (new): 14.114 (10.504,21.505)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.019,-0.016)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -38.861 (-42.413,-35.858)"
[1] "======================================="
[1] "Campania"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.085,-0.059)"
[1] "Half-life in days and its 95% confidence interval (new): 9.635 (8.128,11.827)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.028 (-0.029,-0.026)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -25.132 (-26.174,-24.170)"
[1] "======================================="
[1] "Emilia-Romagna"
[1] "Estimated slope and its 95% confidence interval (new): -0.043 (-0.051,-0.034)"
[1] "Half-life in days and its 95% confidence interval (new): 16.210 (13.492,20.300)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -57.251 (-66.425,-50.304)"
[1] "======================================="
[1] "Friuli Venezia Giulia"
[1] "Estimated slope and its 95% confidence interval (new): -0.054 (-0.078,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 12.838 (8.928,22.839)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.024 (-0.026,-0.022)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -28.984 (-31.062,-27.166)"
[1] "======================================="
[1] "Lazio"
[1] "======================================="
[1] "Liguria"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.052,-0.041)"
[1] "Half-life in days and its 95% confidence interval (new): 14.920 (13.242,17.085)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.013 (-0.016,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -54.456 (-70.434,-44.388)"
[1] "======================================="
[1] "Lombardia"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.057,-0.043)"
[1] "Half-life in days and its 95% confidence interval (new): 13.758 (12.060,16.014)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.009)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -60.096 (-76.630,-49.430)"
[1] "======================================="
[1] "Marche"
[1] "Estimated slope and its 95% confidence interval (new): -0.095 (-0.115,-0.075)"
[1] "Half-life in days and its 95% confidence interval (new): 7.297 (6.002,9.303)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.036 (-0.040,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -19.494 (-22.483,-17.207)"
[1] "======================================="
[1] "Molise"
[1] "======================================="
[1] "P.A. Bolzano"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.075,-0.026)"
[1] "Half-life in days and its 95% confidence interval (new): 13.775 (9.289,26.642)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.015 (-0.017,-0.014)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -45.294 (-50.205,-41.259)"
[1] "======================================="
[1] "P.A. Trento"
[1] "Estimated slope and its 95% confidence interval (new): -0.063 (-0.077,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 10.917 (8.987,13.901)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.029 (-0.030,-0.028)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -23.914 (-24.508,-23.348)"
[1] "======================================="
[1] "Piemonte"
[1] "Estimated slope and its 95% confidence interval (new): -0.039 (-0.047,-0.031)"
[1] "Half-life in days and its 95% confidence interval (new): 17.766 (14.769,22.289)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.011 (-0.015,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -62.185 (-91.724,-47.037)"
[1] "======================================="
[1] "Puglia"
[1] "Estimated slope and its 95% confidence interval (new): -0.055 (-0.066,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 12.562 (10.498,15.634)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.020,-0.017)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -37.830 (-41.640,-34.659)"
[1] "======================================="
[1] "Sardegna"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.094,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 9.656 (7.377,13.973)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.021 (-0.023,-0.019)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -32.901 (-36.851,-29.715)"
[1] "======================================="
[1] "Sicilia"
[1] "Estimated slope and its 95% confidence interval (new): -0.061 (-0.073,-0.048)"
[1] "Half-life in days and its 95% confidence interval (new): 11.430 (9.499,14.347)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.021,-0.011)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -43.841 (-65.505,-32.946)"
[1] "======================================="
[1] "Toscana"
[1] "Estimated slope and its 95% confidence interval (new): -0.040 (-0.050,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 17.430 (13.872,23.442)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.017,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -56.201 (-90.071,-40.843)"
[1] "======================================="
[1] "Umbria"
[1] "Estimated slope and its 95% confidence interval (new): -0.131 (-0.150,-0.112)"
[1] "Half-life in days and its 95% confidence interval (new): 5.292 (4.616,6.201)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.037,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.260 (-22.265,-18.587)"
[1] "======================================="
[1] "Valle d'Aosta"
[1] "======================================="
[1] "Veneto"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.055,-0.038)"
[1] "Half-life in days and its 95% confidence interval (new): 15.008 (12.710,18.321)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.015,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -49.682 (-53.827,-46.130)"
[1] "======================================="
[1] "Italy"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.054,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 14.104 (12.874,15.594)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.018,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -44.250 (-51.974,-38.525)"
[1] "======================================="
[1] "Abruzzo"
[1] "Estimated slope and its 95% confidence interval (new): -0.036 (-0.060,-0.011)"
[1] "Half-life in days and its 95% confidence interval (new): 19.390 (11.517,61.286)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.019,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -48.176 (-72.681,-36.028)"
[1] "======================================="
[1] "Basilicata"
[1] "Estimated slope and its 95% confidence interval (new): -0.115 (-0.145,-0.086)"
[1] "Half-life in days and its 95% confidence interval (new): 6.016 (4.791,8.083)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.036,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.686 (-22.450,-19.179)"
[1] "======================================="
[1] "Calabria"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.066,-0.032)"
[1] "Half-life in days and its 95% confidence interval (new): 14.114 (10.504,21.505)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.019,-0.016)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -38.861 (-42.413,-35.858)"
[1] "======================================="
[1] "Campania"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.085,-0.059)"
[1] "Half-life in days and its 95% confidence interval (new): 9.635 (8.128,11.827)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.028 (-0.029,-0.026)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -25.132 (-26.174,-24.170)"
[1] "======================================="
[1] "Emilia-Romagna"
[1] "Estimated slope and its 95% confidence interval (new): -0.043 (-0.051,-0.034)"
[1] "Half-life in days and its 95% confidence interval (new): 16.210 (13.492,20.300)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -57.251 (-66.425,-50.304)"
[1] "======================================="
[1] "Friuli Venezia Giulia"
[1] "Estimated slope and its 95% confidence interval (new): -0.054 (-0.078,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 12.838 (8.928,22.839)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.024 (-0.026,-0.022)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -28.984 (-31.062,-27.166)"
[1] "======================================="
[1] "Lazio"
[1] "======================================="
[1] "Liguria"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.052,-0.041)"
[1] "Half-life in days and its 95% confidence interval (new): 14.920 (13.242,17.085)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.013 (-0.016,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -54.456 (-70.434,-44.388)"
[1] "======================================="
[1] "Lombardia"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.057,-0.043)"
[1] "Half-life in days and its 95% confidence interval (new): 13.758 (12.060,16.014)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.009)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -60.096 (-76.630,-49.430)"
[1] "======================================="
[1] "Marche"
[1] "Estimated slope and its 95% confidence interval (new): -0.095 (-0.115,-0.075)"
[1] "Half-life in days and its 95% confidence interval (new): 7.297 (6.002,9.303)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.036 (-0.040,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -19.494 (-22.483,-17.207)"
[1] "======================================="
[1] "Molise"
[1] "======================================="
[1] "P.A. Bolzano"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.075,-0.026)"
[1] "Half-life in days and its 95% confidence interval (new): 13.775 (9.289,26.642)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.015 (-0.017,-0.014)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -45.294 (-50.205,-41.259)"
[1] "======================================="
[1] "P.A. Trento"
[1] "Estimated slope and its 95% confidence interval (new): -0.063 (-0.077,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 10.917 (8.987,13.901)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.029 (-0.030,-0.028)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -23.914 (-24.508,-23.348)"
[1] "======================================="
[1] "Piemonte"
[1] "Estimated slope and its 95% confidence interval (new): -0.039 (-0.047,-0.031)"
[1] "Half-life in days and its 95% confidence interval (new): 17.766 (14.769,22.289)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.011 (-0.015,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -62.185 (-91.724,-47.037)"
[1] "======================================="
[1] "Puglia"
[1] "Estimated slope and its 95% confidence interval (new): -0.055 (-0.066,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 12.562 (10.498,15.634)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.020,-0.017)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -37.830 (-41.640,-34.659)"
[1] "======================================="
[1] "Sardegna"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.094,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 9.656 (7.377,13.973)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.021 (-0.023,-0.019)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -32.901 (-36.851,-29.715)"
[1] "======================================="
[1] "Sicilia"
[1] "Estimated slope and its 95% confidence interval (new): -0.061 (-0.073,-0.048)"
[1] "Half-life in days and its 95% confidence interval (new): 11.430 (9.499,14.347)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.021,-0.011)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -43.841 (-65.505,-32.946)"
[1] "======================================="
[1] "Toscana"
[1] "Estimated slope and its 95% confidence interval (new): -0.040 (-0.050,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 17.430 (13.872,23.442)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.017,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -56.201 (-90.071,-40.843)"
[1] "======================================="
[1] "Umbria"
[1] "Estimated slope and its 95% confidence interval (new): -0.131 (-0.150,-0.112)"
[1] "Half-life in days and its 95% confidence interval (new): 5.292 (4.616,6.201)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.037,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.260 (-22.265,-18.587)"
[1] "======================================="
[1] "Valle d'Aosta"
[1] "======================================="
[1] "Veneto"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.055,-0.038)"
[1] "Half-life in days and its 95% confidence interval (new): 15.008 (12.710,18.321)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.015,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -49.682 (-53.827,-46.130)"
[1] "======================================="
[1] "Italy"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.054,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 14.104 (12.874,15.594)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.018,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -44.250 (-51.974,-38.525)"
[1] "======================================="
[1] "Abruzzo"
[1] "Estimated slope and its 95% confidence interval (new): -0.036 (-0.060,-0.011)"
[1] "Half-life in days and its 95% confidence interval (new): 19.390 (11.517,61.286)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.019,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -48.176 (-72.681,-36.028)"
[1] "======================================="
[1] "Basilicata"
[1] "Estimated slope and its 95% confidence interval (new): -0.115 (-0.145,-0.086)"
[1] "Half-life in days and its 95% confidence interval (new): 6.016 (4.791,8.083)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.036,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.686 (-22.450,-19.179)"
[1] "======================================="
[1] "Calabria"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.066,-0.032)"
[1] "Half-life in days and its 95% confidence interval (new): 14.114 (10.504,21.505)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.019,-0.016)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -38.861 (-42.413,-35.858)"
[1] "======================================="
[1] "Campania"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.085,-0.059)"
[1] "Half-life in days and its 95% confidence interval (new): 9.635 (8.128,11.827)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.028 (-0.029,-0.026)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -25.132 (-26.174,-24.170)"
[1] "======================================="
[1] "Emilia-Romagna"
[1] "Estimated slope and its 95% confidence interval (new): -0.043 (-0.051,-0.034)"
[1] "Half-life in days and its 95% confidence interval (new): 16.210 (13.492,20.300)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -57.251 (-66.425,-50.304)"
[1] "======================================="
[1] "Friuli Venezia Giulia"
[1] "Estimated slope and its 95% confidence interval (new): -0.054 (-0.078,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 12.838 (8.928,22.839)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.024 (-0.026,-0.022)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -28.984 (-31.062,-27.166)"
[1] "======================================="
[1] "Lazio"
[1] "======================================="
[1] "Liguria"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.052,-0.041)"
[1] "Half-life in days and its 95% confidence interval (new): 14.920 (13.242,17.085)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.013 (-0.016,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -54.456 (-70.434,-44.388)"
[1] "======================================="
[1] "Lombardia"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.057,-0.043)"
[1] "Half-life in days and its 95% confidence interval (new): 13.758 (12.060,16.014)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.009)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -60.096 (-76.630,-49.430)"
[1] "======================================="
[1] "Marche"
[1] "Estimated slope and its 95% confidence interval (new): -0.095 (-0.115,-0.075)"
[1] "Half-life in days and its 95% confidence interval (new): 7.297 (6.002,9.303)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.036 (-0.040,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -19.494 (-22.483,-17.207)"
[1] "======================================="
[1] "Molise"
[1] "======================================="
[1] "P.A. Bolzano"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.075,-0.026)"
[1] "Half-life in days and its 95% confidence interval (new): 13.775 (9.289,26.642)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.015 (-0.017,-0.014)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -45.294 (-50.205,-41.259)"
[1] "======================================="
[1] "P.A. Trento"
[1] "Estimated slope and its 95% confidence interval (new): -0.063 (-0.077,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 10.917 (8.987,13.901)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.029 (-0.030,-0.028)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -23.914 (-24.508,-23.348)"
[1] "======================================="
[1] "Piemonte"
[1] "Estimated slope and its 95% confidence interval (new): -0.039 (-0.047,-0.031)"
[1] "Half-life in days and its 95% confidence interval (new): 17.766 (14.769,22.289)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.011 (-0.015,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -62.185 (-91.724,-47.037)"
[1] "======================================="
[1] "Puglia"
[1] "Estimated slope and its 95% confidence interval (new): -0.055 (-0.066,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 12.562 (10.498,15.634)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.020,-0.017)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -37.830 (-41.640,-34.659)"
[1] "======================================="
[1] "Sardegna"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.094,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 9.656 (7.377,13.973)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.021 (-0.023,-0.019)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -32.901 (-36.851,-29.715)"
[1] "======================================="
[1] "Sicilia"
[1] "Estimated slope and its 95% confidence interval (new): -0.061 (-0.073,-0.048)"
[1] "Half-life in days and its 95% confidence interval (new): 11.430 (9.499,14.347)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.021,-0.011)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -43.841 (-65.505,-32.946)"
[1] "======================================="
[1] "Toscana"
[1] "Estimated slope and its 95% confidence interval (new): -0.040 (-0.050,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 17.430 (13.872,23.442)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.017,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -56.201 (-90.071,-40.843)"
[1] "======================================="
[1] "Umbria"
[1] "Estimated slope and its 95% confidence interval (new): -0.131 (-0.150,-0.112)"
[1] "Half-life in days and its 95% confidence interval (new): 5.292 (4.616,6.201)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.037,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.260 (-22.265,-18.587)"
[1] "======================================="
[1] "Valle d'Aosta"
[1] "======================================="
[1] "Veneto"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.055,-0.038)"
[1] "Half-life in days and its 95% confidence interval (new): 15.008 (12.710,18.321)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.015,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -49.682 (-53.827,-46.130)"
[1] "======================================="
[1] "Italy"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.054,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 14.104 (12.874,15.594)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.018,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -44.250 (-51.974,-38.525)"
[1] "======================================="
[1] "Abruzzo"
[1] "Estimated slope and its 95% confidence interval (new): -0.036 (-0.060,-0.011)"
[1] "Half-life in days and its 95% confidence interval (new): 19.390 (11.517,61.286)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.019,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -48.176 (-72.681,-36.028)"
[1] "======================================="
[1] "Basilicata"
[1] "Estimated slope and its 95% confidence interval (new): -0.115 (-0.145,-0.086)"
[1] "Half-life in days and its 95% confidence interval (new): 6.016 (4.791,8.083)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.036,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.686 (-22.450,-19.179)"
[1] "======================================="
[1] "Calabria"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.066,-0.032)"
[1] "Half-life in days and its 95% confidence interval (new): 14.114 (10.504,21.505)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.019,-0.016)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -38.861 (-42.413,-35.858)"
[1] "======================================="
[1] "Campania"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.085,-0.059)"
[1] "Half-life in days and its 95% confidence interval (new): 9.635 (8.128,11.827)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.028 (-0.029,-0.026)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -25.132 (-26.174,-24.170)"
[1] "======================================="
[1] "Emilia-Romagna"
[1] "Estimated slope and its 95% confidence interval (new): -0.043 (-0.051,-0.034)"
[1] "Half-life in days and its 95% confidence interval (new): 16.210 (13.492,20.300)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -57.251 (-66.425,-50.304)"
[1] "======================================="
[1] "Friuli Venezia Giulia"
[1] "Estimated slope and its 95% confidence interval (new): -0.054 (-0.078,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 12.838 (8.928,22.839)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.024 (-0.026,-0.022)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -28.984 (-31.062,-27.166)"
[1] "======================================="
[1] "Lazio"
[1] "======================================="
[1] "Liguria"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.052,-0.041)"
[1] "Half-life in days and its 95% confidence interval (new): 14.920 (13.242,17.085)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.013 (-0.016,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -54.456 (-70.434,-44.388)"
[1] "======================================="
[1] "Lombardia"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.057,-0.043)"
[1] "Half-life in days and its 95% confidence interval (new): 13.758 (12.060,16.014)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.009)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -60.096 (-76.630,-49.430)"
[1] "======================================="
[1] "Marche"
[1] "Estimated slope and its 95% confidence interval (new): -0.095 (-0.115,-0.075)"
[1] "Half-life in days and its 95% confidence interval (new): 7.297 (6.002,9.303)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.036 (-0.040,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -19.494 (-22.483,-17.207)"
[1] "======================================="
[1] "Molise"
[1] "======================================="
[1] "P.A. Bolzano"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.075,-0.026)"
[1] "Half-life in days and its 95% confidence interval (new): 13.775 (9.289,26.642)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.015 (-0.017,-0.014)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -45.294 (-50.205,-41.259)"
[1] "======================================="
[1] "P.A. Trento"
[1] "Estimated slope and its 95% confidence interval (new): -0.063 (-0.077,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 10.917 (8.987,13.901)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.029 (-0.030,-0.028)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -23.914 (-24.508,-23.348)"
[1] "======================================="
[1] "Piemonte"
[1] "Estimated slope and its 95% confidence interval (new): -0.039 (-0.047,-0.031)"
[1] "Half-life in days and its 95% confidence interval (new): 17.766 (14.769,22.289)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.011 (-0.015,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -62.185 (-91.724,-47.037)"
[1] "======================================="
[1] "Puglia"
[1] "Estimated slope and its 95% confidence interval (new): -0.055 (-0.066,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 12.562 (10.498,15.634)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.020,-0.017)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -37.830 (-41.640,-34.659)"
[1] "======================================="
[1] "Sardegna"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.094,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 9.656 (7.377,13.973)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.021 (-0.023,-0.019)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -32.901 (-36.851,-29.715)"
[1] "======================================="
[1] "Sicilia"
[1] "Estimated slope and its 95% confidence interval (new): -0.061 (-0.073,-0.048)"
[1] "Half-life in days and its 95% confidence interval (new): 11.430 (9.499,14.347)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.021,-0.011)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -43.841 (-65.505,-32.946)"
[1] "======================================="
[1] "Toscana"
[1] "Estimated slope and its 95% confidence interval (new): -0.040 (-0.050,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 17.430 (13.872,23.442)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.017,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -56.201 (-90.071,-40.843)"
[1] "======================================="
[1] "Umbria"
[1] "Estimated slope and its 95% confidence interval (new): -0.131 (-0.150,-0.112)"
[1] "Half-life in days and its 95% confidence interval (new): 5.292 (4.616,6.201)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.037,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.260 (-22.265,-18.587)"
[1] "======================================="
[1] "Valle d'Aosta"
[1] "======================================="
[1] "Veneto"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.055,-0.038)"
[1] "Half-life in days and its 95% confidence interval (new): 15.008 (12.710,18.321)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.015,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -49.682 (-53.827,-46.130)"
[1] "======================================="
[1] "Italy"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.054,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 14.104 (12.874,15.594)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.018,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -44.250 (-51.974,-38.525)"
[1] "======================================="
[1] "Abruzzo"
[1] "Estimated slope and its 95% confidence interval (new): -0.036 (-0.060,-0.011)"
[1] "Half-life in days and its 95% confidence interval (new): 19.390 (11.517,61.286)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.019,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -48.176 (-72.681,-36.028)"
[1] "======================================="
[1] "Basilicata"
[1] "Estimated slope and its 95% confidence interval (new): -0.115 (-0.145,-0.086)"
[1] "Half-life in days and its 95% confidence interval (new): 6.016 (4.791,8.083)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.036,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.686 (-22.450,-19.179)"
[1] "======================================="
[1] "Calabria"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.066,-0.032)"
[1] "Half-life in days and its 95% confidence interval (new): 14.114 (10.504,21.505)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.019,-0.016)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -38.861 (-42.413,-35.858)"
[1] "======================================="
[1] "Campania"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.085,-0.059)"
[1] "Half-life in days and its 95% confidence interval (new): 9.635 (8.128,11.827)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.028 (-0.029,-0.026)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -25.132 (-26.174,-24.170)"
[1] "======================================="
[1] "Emilia-Romagna"
[1] "Estimated slope and its 95% confidence interval (new): -0.043 (-0.051,-0.034)"
[1] "Half-life in days and its 95% confidence interval (new): 16.210 (13.492,20.300)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -57.251 (-66.425,-50.304)"
[1] "======================================="
[1] "Friuli Venezia Giulia"
[1] "Estimated slope and its 95% confidence interval (new): -0.054 (-0.078,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 12.838 (8.928,22.839)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.024 (-0.026,-0.022)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -28.984 (-31.062,-27.166)"
[1] "======================================="
[1] "Lazio"
[1] "======================================="
[1] "Liguria"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.052,-0.041)"
[1] "Half-life in days and its 95% confidence interval (new): 14.920 (13.242,17.085)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.013 (-0.016,-0.010)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -54.456 (-70.434,-44.388)"
[1] "======================================="
[1] "Lombardia"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.057,-0.043)"
[1] "Half-life in days and its 95% confidence interval (new): 13.758 (12.060,16.014)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.014,-0.009)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -60.096 (-76.630,-49.430)"
[1] "======================================="
[1] "Marche"
[1] "Estimated slope and its 95% confidence interval (new): -0.095 (-0.115,-0.075)"
[1] "Half-life in days and its 95% confidence interval (new): 7.297 (6.002,9.303)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.036 (-0.040,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -19.494 (-22.483,-17.207)"
[1] "======================================="
[1] "Molise"
[1] "======================================="
[1] "P.A. Bolzano"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.075,-0.026)"
[1] "Half-life in days and its 95% confidence interval (new): 13.775 (9.289,26.642)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.015 (-0.017,-0.014)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -45.294 (-50.205,-41.259)"
[1] "======================================="
[1] "P.A. Trento"
[1] "Estimated slope and its 95% confidence interval (new): -0.063 (-0.077,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 10.917 (8.987,13.901)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.029 (-0.030,-0.028)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -23.914 (-24.508,-23.348)"
[1] "======================================="
[1] "Piemonte"
[1] "Estimated slope and its 95% confidence interval (new): -0.039 (-0.047,-0.031)"
[1] "Half-life in days and its 95% confidence interval (new): 17.766 (14.769,22.289)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.011 (-0.015,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -62.185 (-91.724,-47.037)"
[1] "======================================="
[1] "Puglia"
[1] "Estimated slope and its 95% confidence interval (new): -0.055 (-0.066,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 12.562 (10.498,15.634)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.020,-0.017)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -37.830 (-41.640,-34.659)"
[1] "======================================="
[1] "Sardegna"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.094,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 9.656 (7.377,13.973)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.021 (-0.023,-0.019)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -32.901 (-36.851,-29.715)"
[1] "======================================="
[1] "Sicilia"
[1] "Estimated slope and its 95% confidence interval (new): -0.061 (-0.073,-0.048)"
[1] "Half-life in days and its 95% confidence interval (new): 11.430 (9.499,14.347)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.021,-0.011)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -43.841 (-65.505,-32.946)"
[1] "======================================="
[1] "Toscana"
[1] "Estimated slope and its 95% confidence interval (new): -0.040 (-0.050,-0.030)"
[1] "Half-life in days and its 95% confidence interval (new): 17.430 (13.872,23.442)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.012 (-0.017,-0.008)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -56.201 (-90.071,-40.843)"
[1] "======================================="
[1] "Umbria"
[1] "Estimated slope and its 95% confidence interval (new): -0.131 (-0.150,-0.112)"
[1] "Half-life in days and its 95% confidence interval (new): 5.292 (4.616,6.201)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.034 (-0.037,-0.031)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -20.260 (-22.265,-18.587)"
[1] "======================================="
[1] "Valle d'Aosta"
[1] "======================================="
[1] "Veneto"
[1] "Estimated slope and its 95% confidence interval (new): -0.046 (-0.055,-0.038)"
[1] "Half-life in days and its 95% confidence interval (new): 15.008 (12.710,18.321)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.014 (-0.015,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -49.682 (-53.827,-46.130)"
[1] "======================================="
[1] "Italy"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.054,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 14.104 (12.874,15.594)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.018,-0.013)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -44.250 (-51.974,-38.525)"
[1] "======================================="
[1] "Abruzzo"
[1] "Estimated slope and its 95% confidence interval (new): -0.051 (-0.064,-0.039)"
[1] "Half-life in days and its 95% confidence interval (new): 13.501 (10.830,17.923)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.017 (-0.019,-0.015)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -40.259 (-45.784,-35.924)"
[1] "======================================="
[1] "Basilicata"
[1] "Estimated slope and its 95% confidence interval (new): -0.079 (-0.099,-0.059)"
[1] "Half-life in days and its 95% confidence interval (new): 8.786 (7.037,11.693)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.041 (-0.043,-0.040)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -16.866 (-17.513,-16.265)"
[1] "======================================="
[1] "Calabria"
[1] "Estimated slope and its 95% confidence interval (new): -0.074 (-0.085,-0.063)"
[1] "Half-life in days and its 95% confidence interval (new): 9.315 (8.122,10.918)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.023 (-0.024,-0.022)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -30.582 (-32.028,-29.262)"
[1] "======================================="
[1] "Campania"
[1] "Estimated slope and its 95% confidence interval (new): -0.087 (-0.094,-0.079)"
[1] "Half-life in days and its 95% confidence interval (new): 7.998 (7.376,8.734)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.031 (-0.032,-0.030)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -22.438 (-22.933,-21.964)"
[1] "======================================="
[1] "Emilia-Romagna"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.055,-0.046)"
[1] "Half-life in days and its 95% confidence interval (new): 13.774 (12.594,15.196)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.017 (-0.018,-0.016)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -40.674 (-43.387,-38.280)"
[1] "======================================="
[1] "Friuli Venezia Giulia"
[1] "Estimated slope and its 95% confidence interval (new): -0.070 (-0.082,-0.058)"
[1] "Half-life in days and its 95% confidence interval (new): 9.885 (8.456,11.894)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.028 (-0.029,-0.027)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -24.866 (-25.680,-24.101)"
[1] "======================================="
[1] "Lazio"
[1] "======================================="
[1] "Liguria"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.053,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 14.217 (13.002,15.682)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.020,-0.017)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -37.641 (-41.024,-34.775)"
[1] "======================================="
[1] "Lombardia"
[1] "Estimated slope and its 95% confidence interval (new): -0.047 (-0.051,-0.043)"
[1] "Half-life in days and its 95% confidence interval (new): 14.829 (13.712,16.144)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.018,-0.015)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -42.525 (-46.208,-39.386)"
[1] "======================================="
[1] "Marche"
[1] "Estimated slope and its 95% confidence interval (new): -0.074 (-0.084,-0.065)"
[1] "Half-life in days and its 95% confidence interval (new): 9.304 (8.256,10.657)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.036 (-0.037,-0.034)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -19.519 (-20.639,-18.515)"
[1] "======================================="
[1] "Molise"
[1] "======================================="
[1] "P.A. Bolzano"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.084,-0.059)"
[1] "Half-life in days and its 95% confidence interval (new): 9.681 (8.246,11.720)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.019,-0.018)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -37.589 (-39.332,-35.994)"
[1] "======================================="
[1] "P.A. Trento"
[1] "Estimated slope and its 95% confidence interval (new): -0.083 (-0.099,-0.068)"
[1] "Half-life in days and its 95% confidence interval (new): 8.308 (7.033,10.148)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.027 (-0.028,-0.027)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -25.537 (-25.948,-25.139)"
[1] "======================================="
[1] "Piemonte"
[1] "Estimated slope and its 95% confidence interval (new): -0.048 (-0.052,-0.043)"
[1] "Half-life in days and its 95% confidence interval (new): 14.451 (13.207,15.954)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.019,-0.016)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -39.243 (-43.796,-35.548)"
[1] "======================================="
[1] "Puglia"
[1] "Estimated slope and its 95% confidence interval (new): -0.057 (-0.064,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 12.157 (10.864,13.800)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.020 (-0.021,-0.019)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -34.395 (-35.594,-33.273)"
[1] "======================================="
[1] "Sardegna"
[1] "Estimated slope and its 95% confidence interval (new): -0.092 (-0.105,-0.078)"
[1] "Half-life in days and its 95% confidence interval (new): 7.573 (6.599,8.884)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.030 (-0.031,-0.028)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -23.310 (-24.602,-22.147)"
[1] "======================================="
[1] "Sicilia"
[1] "Estimated slope and its 95% confidence interval (new): -0.061 (-0.068,-0.053)"
[1] "Half-life in days and its 95% confidence interval (new): 11.430 (10.156,13.069)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.023 (-0.026,-0.021)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -29.589 (-33.149,-26.719)"
[1] "======================================="
[1] "Toscana"
[1] "Estimated slope and its 95% confidence interval (new): -0.052 (-0.058,-0.045)"
[1] "Half-life in days and its 95% confidence interval (new): 13.430 (11.920,15.379)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.017 (-0.019,-0.015)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -40.971 (-47.472,-36.036)"
[1] "======================================="
[1] "Umbria"
[1] "Estimated slope and its 95% confidence interval (new): -0.103 (-0.116,-0.090)"
[1] "Half-life in days and its 95% confidence interval (new): 6.720 (5.959,7.704)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.035 (-0.036,-0.033)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -19.892 (-20.731,-19.118)"
[1] "======================================="
[1] "Valle d'Aosta"
[1] "======================================="
[1] "Veneto"
[1] "Estimated slope and its 95% confidence interval (new): -0.059 (-0.065,-0.053)"
[1] "Half-life in days and its 95% confidence interval (new): 11.693 (10.592,13.049)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.017,-0.016)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -42.325 (-43.799,-40.947)"
[1] "======================================="
[1] "Italy"
[1] "Estimated slope and its 95% confidence interval (new): -0.051 (-0.053,-0.048)"
[1] "Half-life in days and its 95% confidence interval (new): 13.617 (12.972,14.330)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.019 (-0.020,-0.018)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -35.882 (-38.130,-33.884)"
[1] "======================================="
[1] "Abruzzo"
[1] "Estimated slope and its 95% confidence interval (new): -0.051 (-0.064,-0.039)"
[1] "Half-life in days and its 95% confidence interval (new): 13.501 (10.830,17.923)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.017 (-0.019,-0.015)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -40.259 (-45.784,-35.924)"
[1] "======================================="
[1] "Basilicata"
[1] "Estimated slope and its 95% confidence interval (new): -0.079 (-0.099,-0.059)"
[1] "Half-life in days and its 95% confidence interval (new): 8.786 (7.037,11.693)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.041 (-0.043,-0.040)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -16.866 (-17.513,-16.265)"
[1] "======================================="
[1] "Calabria"
[1] "Estimated slope and its 95% confidence interval (new): -0.074 (-0.085,-0.063)"
[1] "Half-life in days and its 95% confidence interval (new): 9.315 (8.122,10.918)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.023 (-0.024,-0.022)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -30.582 (-32.028,-29.262)"
[1] "======================================="
[1] "Campania"
[1] "Estimated slope and its 95% confidence interval (new): -0.087 (-0.094,-0.079)"
[1] "Half-life in days and its 95% confidence interval (new): 7.998 (7.376,8.734)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.031 (-0.032,-0.030)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -22.438 (-22.933,-21.964)"
[1] "======================================="
[1] "Emilia-Romagna"
[1] "Estimated slope and its 95% confidence interval (new): -0.050 (-0.055,-0.046)"
[1] "Half-life in days and its 95% confidence interval (new): 13.774 (12.594,15.196)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.017 (-0.018,-0.016)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -40.674 (-43.387,-38.280)"
[1] "======================================="
[1] "Friuli Venezia Giulia"
[1] "Estimated slope and its 95% confidence interval (new): -0.070 (-0.082,-0.058)"
[1] "Half-life in days and its 95% confidence interval (new): 9.885 (8.456,11.894)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.028 (-0.029,-0.027)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -24.866 (-25.680,-24.101)"
[1] "======================================="
[1] "Lazio"
[1] "======================================="
[1] "Liguria"
[1] "Estimated slope and its 95% confidence interval (new): -0.049 (-0.053,-0.044)"
[1] "Half-life in days and its 95% confidence interval (new): 14.217 (13.002,15.682)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.020,-0.017)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -37.641 (-41.024,-34.775)"
[1] "======================================="
[1] "Lombardia"
[1] "Estimated slope and its 95% confidence interval (new): -0.047 (-0.051,-0.043)"
[1] "Half-life in days and its 95% confidence interval (new): 14.829 (13.712,16.144)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.018,-0.015)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -42.525 (-46.208,-39.386)"
[1] "======================================="
[1] "Marche"
[1] "Estimated slope and its 95% confidence interval (new): -0.074 (-0.084,-0.065)"
[1] "Half-life in days and its 95% confidence interval (new): 9.304 (8.256,10.657)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.036 (-0.037,-0.034)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -19.519 (-20.639,-18.515)"
[1] "======================================="
[1] "Molise"
[1] "======================================="
[1] "P.A. Bolzano"
[1] "Estimated slope and its 95% confidence interval (new): -0.072 (-0.084,-0.059)"
[1] "Half-life in days and its 95% confidence interval (new): 9.681 (8.246,11.720)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.019,-0.018)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -37.589 (-39.332,-35.994)"
[1] "======================================="
[1] "P.A. Trento"
[1] "Estimated slope and its 95% confidence interval (new): -0.083 (-0.099,-0.068)"
[1] "Half-life in days and its 95% confidence interval (new): 8.308 (7.033,10.148)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.027 (-0.028,-0.027)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -25.537 (-25.948,-25.139)"
[1] "======================================="
[1] "Piemonte"
[1] "Estimated slope and its 95% confidence interval (new): -0.048 (-0.052,-0.043)"
[1] "Half-life in days and its 95% confidence interval (new): 14.451 (13.207,15.954)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.018 (-0.019,-0.016)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -39.243 (-43.796,-35.548)"
[1] "======================================="
[1] "Puglia"
[1] "Estimated slope and its 95% confidence interval (new): -0.057 (-0.064,-0.050)"
[1] "Half-life in days and its 95% confidence interval (new): 12.157 (10.864,13.800)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.020 (-0.021,-0.019)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -34.395 (-35.594,-33.273)"
[1] "======================================="
[1] "Sardegna"
[1] "Estimated slope and its 95% confidence interval (new): -0.092 (-0.105,-0.078)"
[1] "Half-life in days and its 95% confidence interval (new): 7.573 (6.599,8.884)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.030 (-0.031,-0.028)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -23.310 (-24.602,-22.147)"
[1] "======================================="
[1] "Sicilia"
[1] "Estimated slope and its 95% confidence interval (new): -0.061 (-0.068,-0.053)"
[1] "Half-life in days and its 95% confidence interval (new): 11.430 (10.156,13.069)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.023 (-0.026,-0.021)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -29.589 (-33.149,-26.719)"
[1] "======================================="
[1] "Toscana"
[1] "Estimated slope and its 95% confidence interval (new): -0.052 (-0.058,-0.045)"
[1] "Half-life in days and its 95% confidence interval (new): 13.430 (11.920,15.379)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.017 (-0.019,-0.015)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -40.971 (-47.472,-36.036)"
[1] "======================================="
[1] "Umbria"
[1] "Estimated slope and its 95% confidence interval (new): -0.103 (-0.116,-0.090)"
[1] "Half-life in days and its 95% confidence interval (new): 6.720 (5.959,7.704)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.035 (-0.036,-0.033)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -19.892 (-20.731,-19.118)"
[1] "======================================="
[1] "Valle d'Aosta"
[1] "======================================="
[1] "Veneto"
[1] "Estimated slope and its 95% confidence interval (new): -0.059 (-0.065,-0.053)"
[1] "Half-life in days and its 95% confidence interval (new): 11.693 (10.592,13.049)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.016 (-0.017,-0.016)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -42.325 (-43.799,-40.947)"
[1] "======================================="
[1] "Italy"
[1] "Estimated slope and its 95% confidence interval (new): -0.051 (-0.053,-0.048)"
[1] "Half-life in days and its 95% confidence interval (new): 13.617 (12.972,14.330)"
[1] "Estimated slope and its 95% confidence interval (cumulative): -0.019 (-0.020,-0.018)"
[1] "Doubling time in days and its 95% confidence interval (cumulative): -35.882 (-38.130,-33.884)"
[1] "======================================="
